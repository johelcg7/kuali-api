
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Companies
 * 
 */
export type Companies = $Result.DefaultSelection<Prisma.$CompaniesPayload>
/**
 * Model Leads
 * 
 */
export type Leads = $Result.DefaultSelection<Prisma.$LeadsPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model ContactLog
 * 
 */
export type ContactLog = $Result.DefaultSelection<Prisma.$ContactLogPayload>
/**
 * Model Templates
 * 
 */
export type Templates = $Result.DefaultSelection<Prisma.$TemplatesPayload>
/**
 * Model Events
 * 
 */
export type Events = $Result.DefaultSelection<Prisma.$EventsPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.companies.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.companies.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.companies`: Exposes CRUD operations for the **Companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.CompaniesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.leads`: Exposes CRUD operations for the **Leads** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leads
    * const leads = await prisma.leads.findMany()
    * ```
    */
  get leads(): Prisma.LeadsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactLog`: Exposes CRUD operations for the **ContactLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContactLogs
    * const contactLogs = await prisma.contactLog.findMany()
    * ```
    */
  get contactLog(): Prisma.ContactLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.templates`: Exposes CRUD operations for the **Templates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Templates
    * const templates = await prisma.templates.findMany()
    * ```
    */
  get templates(): Prisma.TemplatesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.events`: Exposes CRUD operations for the **Events** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.events.findMany()
    * ```
    */
  get events(): Prisma.EventsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Companies: 'Companies',
    Leads: 'Leads',
    Users: 'Users',
    ContactLog: 'ContactLog',
    Templates: 'Templates',
    Events: 'Events'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "companies" | "leads" | "users" | "contactLog" | "templates" | "events"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Companies: {
        payload: Prisma.$CompaniesPayload<ExtArgs>
        fields: Prisma.CompaniesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompaniesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompaniesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          findFirst: {
            args: Prisma.CompaniesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompaniesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          findMany: {
            args: Prisma.CompaniesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>[]
          }
          create: {
            args: Prisma.CompaniesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          createMany: {
            args: Prisma.CompaniesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompaniesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>[]
          }
          delete: {
            args: Prisma.CompaniesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          update: {
            args: Prisma.CompaniesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          deleteMany: {
            args: Prisma.CompaniesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompaniesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompaniesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>[]
          }
          upsert: {
            args: Prisma.CompaniesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          aggregate: {
            args: Prisma.CompaniesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanies>
          }
          groupBy: {
            args: Prisma.CompaniesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompaniesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompaniesCountArgs<ExtArgs>
            result: $Utils.Optional<CompaniesCountAggregateOutputType> | number
          }
        }
      }
      Leads: {
        payload: Prisma.$LeadsPayload<ExtArgs>
        fields: Prisma.LeadsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>
          }
          findFirst: {
            args: Prisma.LeadsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>
          }
          findMany: {
            args: Prisma.LeadsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>[]
          }
          create: {
            args: Prisma.LeadsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>
          }
          createMany: {
            args: Prisma.LeadsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>[]
          }
          delete: {
            args: Prisma.LeadsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>
          }
          update: {
            args: Prisma.LeadsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>
          }
          deleteMany: {
            args: Prisma.LeadsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeadsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>[]
          }
          upsert: {
            args: Prisma.LeadsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadsPayload>
          }
          aggregate: {
            args: Prisma.LeadsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeads>
          }
          groupBy: {
            args: Prisma.LeadsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadsCountArgs<ExtArgs>
            result: $Utils.Optional<LeadsCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      ContactLog: {
        payload: Prisma.$ContactLogPayload<ExtArgs>
        fields: Prisma.ContactLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>
          }
          findFirst: {
            args: Prisma.ContactLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>
          }
          findMany: {
            args: Prisma.ContactLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>[]
          }
          create: {
            args: Prisma.ContactLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>
          }
          createMany: {
            args: Prisma.ContactLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>[]
          }
          delete: {
            args: Prisma.ContactLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>
          }
          update: {
            args: Prisma.ContactLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>
          }
          deleteMany: {
            args: Prisma.ContactLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>[]
          }
          upsert: {
            args: Prisma.ContactLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactLogPayload>
          }
          aggregate: {
            args: Prisma.ContactLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactLog>
          }
          groupBy: {
            args: Prisma.ContactLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactLogCountArgs<ExtArgs>
            result: $Utils.Optional<ContactLogCountAggregateOutputType> | number
          }
        }
      }
      Templates: {
        payload: Prisma.$TemplatesPayload<ExtArgs>
        fields: Prisma.TemplatesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplatesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplatesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>
          }
          findFirst: {
            args: Prisma.TemplatesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplatesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>
          }
          findMany: {
            args: Prisma.TemplatesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>[]
          }
          create: {
            args: Prisma.TemplatesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>
          }
          createMany: {
            args: Prisma.TemplatesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplatesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>[]
          }
          delete: {
            args: Prisma.TemplatesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>
          }
          update: {
            args: Prisma.TemplatesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>
          }
          deleteMany: {
            args: Prisma.TemplatesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplatesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TemplatesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>[]
          }
          upsert: {
            args: Prisma.TemplatesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatesPayload>
          }
          aggregate: {
            args: Prisma.TemplatesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplates>
          }
          groupBy: {
            args: Prisma.TemplatesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplatesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplatesCountArgs<ExtArgs>
            result: $Utils.Optional<TemplatesCountAggregateOutputType> | number
          }
        }
      }
      Events: {
        payload: Prisma.$EventsPayload<ExtArgs>
        fields: Prisma.EventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findFirst: {
            args: Prisma.EventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          findMany: {
            args: Prisma.EventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          create: {
            args: Prisma.EventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          createMany: {
            args: Prisma.EventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          delete: {
            args: Prisma.EventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          update: {
            args: Prisma.EventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          deleteMany: {
            args: Prisma.EventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EventsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>[]
          }
          upsert: {
            args: Prisma.EventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventsPayload>
          }
          aggregate: {
            args: Prisma.EventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvents>
          }
          groupBy: {
            args: Prisma.EventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventsCountArgs<ExtArgs>
            result: $Utils.Optional<EventsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    companies?: CompaniesOmit
    leads?: LeadsOmit
    users?: UsersOmit
    contactLog?: ContactLogOmit
    templates?: TemplatesOmit
    events?: EventsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompaniesCountOutputType
   */

  export type CompaniesCountOutputType = {
    events: number
    leads: number
    templates: number
    users: number
  }

  export type CompaniesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | CompaniesCountOutputTypeCountEventsArgs
    leads?: boolean | CompaniesCountOutputTypeCountLeadsArgs
    templates?: boolean | CompaniesCountOutputTypeCountTemplatesArgs
    users?: boolean | CompaniesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompaniesCountOutputType
     */
    select?: CompaniesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplatesWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    leads: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leads?: boolean | UsersCountOutputTypeCountLeadsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadsWhereInput
  }


  /**
   * Count Type EventsCountOutputType
   */

  export type EventsCountOutputType = {
    leads: number
  }

  export type EventsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leads?: boolean | EventsCountOutputTypeCountLeadsArgs
  }

  // Custom InputTypes
  /**
   * EventsCountOutputType without action
   */
  export type EventsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventsCountOutputType
     */
    select?: EventsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventsCountOutputType without action
   */
  export type EventsCountOutputTypeCountLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Companies
   */

  export type AggregateCompanies = {
    _count: CompaniesCountAggregateOutputType | null
    _avg: CompaniesAvgAggregateOutputType | null
    _sum: CompaniesSumAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesAvgAggregateOutputType = {
    employee_numbers: number | null
    ruc: number | null
    id: number | null
  }

  export type CompaniesSumAggregateOutputType = {
    employee_numbers: number | null
    ruc: number | null
    id: number | null
  }

  export type CompaniesMinAggregateOutputType = {
    name: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
    employee_numbers: number | null
    ruc: number | null
    sector: string | null
    id: number | null
  }

  export type CompaniesMaxAggregateOutputType = {
    name: string | null
    country: string | null
    createdAt: Date | null
    updatedAt: Date | null
    employee_numbers: number | null
    ruc: number | null
    sector: string | null
    id: number | null
  }

  export type CompaniesCountAggregateOutputType = {
    name: number
    country: number
    createdAt: number
    updatedAt: number
    employee_numbers: number
    ruc: number
    sector: number
    id: number
    _all: number
  }


  export type CompaniesAvgAggregateInputType = {
    employee_numbers?: true
    ruc?: true
    id?: true
  }

  export type CompaniesSumAggregateInputType = {
    employee_numbers?: true
    ruc?: true
    id?: true
  }

  export type CompaniesMinAggregateInputType = {
    name?: true
    country?: true
    createdAt?: true
    updatedAt?: true
    employee_numbers?: true
    ruc?: true
    sector?: true
    id?: true
  }

  export type CompaniesMaxAggregateInputType = {
    name?: true
    country?: true
    createdAt?: true
    updatedAt?: true
    employee_numbers?: true
    ruc?: true
    sector?: true
    id?: true
  }

  export type CompaniesCountAggregateInputType = {
    name?: true
    country?: true
    createdAt?: true
    updatedAt?: true
    employee_numbers?: true
    ruc?: true
    sector?: true
    id?: true
    _all?: true
  }

  export type CompaniesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to aggregate.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationInput | CompaniesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompaniesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompaniesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends CompaniesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanies[P]>
      : GetScalarType<T[P], AggregateCompanies[P]>
  }




  export type CompaniesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompaniesWhereInput
    orderBy?: CompaniesOrderByWithAggregationInput | CompaniesOrderByWithAggregationInput[]
    by: CompaniesScalarFieldEnum[] | CompaniesScalarFieldEnum
    having?: CompaniesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompaniesCountAggregateInputType | true
    _avg?: CompaniesAvgAggregateInputType
    _sum?: CompaniesSumAggregateInputType
    _min?: CompaniesMinAggregateInputType
    _max?: CompaniesMaxAggregateInputType
  }

  export type CompaniesGroupByOutputType = {
    name: string
    country: string
    createdAt: Date
    updatedAt: Date
    employee_numbers: number | null
    ruc: number | null
    sector: string
    id: number
    _count: CompaniesCountAggregateOutputType | null
    _avg: CompaniesAvgAggregateOutputType | null
    _sum: CompaniesSumAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  type GetCompaniesGroupByPayload<T extends CompaniesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompaniesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompaniesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
            : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
        }
      >
    >


  export type CompaniesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee_numbers?: boolean
    ruc?: boolean
    sector?: boolean
    id?: boolean
    events?: boolean | Companies$eventsArgs<ExtArgs>
    leads?: boolean | Companies$leadsArgs<ExtArgs>
    templates?: boolean | Companies$templatesArgs<ExtArgs>
    users?: boolean | Companies$usersArgs<ExtArgs>
    _count?: boolean | CompaniesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companies"]>

  export type CompaniesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee_numbers?: boolean
    ruc?: boolean
    sector?: boolean
    id?: boolean
  }, ExtArgs["result"]["companies"]>

  export type CompaniesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee_numbers?: boolean
    ruc?: boolean
    sector?: boolean
    id?: boolean
  }, ExtArgs["result"]["companies"]>

  export type CompaniesSelectScalar = {
    name?: boolean
    country?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employee_numbers?: boolean
    ruc?: boolean
    sector?: boolean
    id?: boolean
  }

  export type CompaniesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "country" | "createdAt" | "updatedAt" | "employee_numbers" | "ruc" | "sector" | "id", ExtArgs["result"]["companies"]>
  export type CompaniesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | Companies$eventsArgs<ExtArgs>
    leads?: boolean | Companies$leadsArgs<ExtArgs>
    templates?: boolean | Companies$templatesArgs<ExtArgs>
    users?: boolean | Companies$usersArgs<ExtArgs>
    _count?: boolean | CompaniesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompaniesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompaniesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompaniesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Companies"
    objects: {
      events: Prisma.$EventsPayload<ExtArgs>[]
      leads: Prisma.$LeadsPayload<ExtArgs>[]
      templates: Prisma.$TemplatesPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      country: string
      createdAt: Date
      updatedAt: Date
      employee_numbers: number | null
      ruc: number | null
      sector: string
      id: number
    }, ExtArgs["result"]["companies"]>
    composites: {}
  }

  type CompaniesGetPayload<S extends boolean | null | undefined | CompaniesDefaultArgs> = $Result.GetResult<Prisma.$CompaniesPayload, S>

  type CompaniesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompaniesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompaniesCountAggregateInputType | true
    }

  export interface CompaniesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Companies'], meta: { name: 'Companies' } }
    /**
     * Find zero or one Companies that matches the filter.
     * @param {CompaniesFindUniqueArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompaniesFindUniqueArgs>(args: SelectSubset<T, CompaniesFindUniqueArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Companies that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompaniesFindUniqueOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompaniesFindUniqueOrThrowArgs>(args: SelectSubset<T, CompaniesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompaniesFindFirstArgs>(args?: SelectSubset<T, CompaniesFindFirstArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Companies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompaniesFindFirstOrThrowArgs>(args?: SelectSubset<T, CompaniesFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const companiesWithNameOnly = await prisma.companies.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends CompaniesFindManyArgs>(args?: SelectSubset<T, CompaniesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Companies.
     * @param {CompaniesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
     */
    create<T extends CompaniesCreateArgs>(args: SelectSubset<T, CompaniesCreateArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompaniesCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const companies = await prisma.companies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompaniesCreateManyArgs>(args?: SelectSubset<T, CompaniesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompaniesCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const companies = await prisma.companies.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `name`
     * const companiesWithNameOnly = await prisma.companies.createManyAndReturn({
     *   select: { name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompaniesCreateManyAndReturnArgs>(args?: SelectSubset<T, CompaniesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Companies.
     * @param {CompaniesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
     */
    delete<T extends CompaniesDeleteArgs>(args: SelectSubset<T, CompaniesDeleteArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Companies.
     * @param {CompaniesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompaniesUpdateArgs>(args: SelectSubset<T, CompaniesUpdateArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompaniesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompaniesDeleteManyArgs>(args?: SelectSubset<T, CompaniesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompaniesUpdateManyArgs>(args: SelectSubset<T, CompaniesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompaniesUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `name`
     * const companiesWithNameOnly = await prisma.companies.updateManyAndReturn({
     *   select: { name: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompaniesUpdateManyAndReturnArgs>(args: SelectSubset<T, CompaniesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Companies.
     * @param {CompaniesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
     */
    upsert<T extends CompaniesUpsertArgs>(args: SelectSubset<T, CompaniesUpsertArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompaniesCountArgs>(
      args?: Subset<T, CompaniesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompaniesAggregateArgs>(args: Subset<T, CompaniesAggregateArgs>): Prisma.PrismaPromise<GetCompaniesAggregateType<T>>

    /**
     * Group by Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompaniesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompaniesGroupByArgs['orderBy'] }
        : { orderBy?: CompaniesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompaniesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompaniesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Companies model
   */
  readonly fields: CompaniesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompaniesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends Companies$eventsArgs<ExtArgs> = {}>(args?: Subset<T, Companies$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leads<T extends Companies$leadsArgs<ExtArgs> = {}>(args?: Subset<T, Companies$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    templates<T extends Companies$templatesArgs<ExtArgs> = {}>(args?: Subset<T, Companies$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Companies$usersArgs<ExtArgs> = {}>(args?: Subset<T, Companies$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Companies model
   */
  interface CompaniesFieldRefs {
    readonly name: FieldRef<"Companies", 'String'>
    readonly country: FieldRef<"Companies", 'String'>
    readonly createdAt: FieldRef<"Companies", 'DateTime'>
    readonly updatedAt: FieldRef<"Companies", 'DateTime'>
    readonly employee_numbers: FieldRef<"Companies", 'Float'>
    readonly ruc: FieldRef<"Companies", 'Float'>
    readonly sector: FieldRef<"Companies", 'String'>
    readonly id: FieldRef<"Companies", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Companies findUnique
   */
  export type CompaniesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where: CompaniesWhereUniqueInput
  }

  /**
   * Companies findUniqueOrThrow
   */
  export type CompaniesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where: CompaniesWhereUniqueInput
  }

  /**
   * Companies findFirst
   */
  export type CompaniesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationInput | CompaniesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * Companies findFirstOrThrow
   */
  export type CompaniesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationInput | CompaniesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * Companies findMany
   */
  export type CompaniesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationInput | CompaniesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * Companies create
   */
  export type CompaniesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * The data needed to create a Companies.
     */
    data: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
  }

  /**
   * Companies createMany
   */
  export type CompaniesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompaniesCreateManyInput | CompaniesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Companies createManyAndReturn
   */
  export type CompaniesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompaniesCreateManyInput | CompaniesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Companies update
   */
  export type CompaniesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * The data needed to update a Companies.
     */
    data: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
    /**
     * Choose, which Companies to update.
     */
    where: CompaniesWhereUniqueInput
  }

  /**
   * Companies updateMany
   */
  export type CompaniesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompaniesUpdateManyMutationInput, CompaniesUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompaniesWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Companies updateManyAndReturn
   */
  export type CompaniesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompaniesUpdateManyMutationInput, CompaniesUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompaniesWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Companies upsert
   */
  export type CompaniesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * The filter to search for the Companies to update in case it exists.
     */
    where: CompaniesWhereUniqueInput
    /**
     * In case the Companies found by the `where` argument doesn't exist, create a new Companies with this data.
     */
    create: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
    /**
     * In case the Companies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
  }

  /**
   * Companies delete
   */
  export type CompaniesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
    /**
     * Filter which Companies to delete.
     */
    where: CompaniesWhereUniqueInput
  }

  /**
   * Companies deleteMany
   */
  export type CompaniesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompaniesWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Companies.events
   */
  export type Companies$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    where?: EventsWhereInput
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    cursor?: EventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Companies.leads
   */
  export type Companies$leadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    where?: LeadsWhereInput
    orderBy?: LeadsOrderByWithRelationInput | LeadsOrderByWithRelationInput[]
    cursor?: LeadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * Companies.templates
   */
  export type Companies$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    where?: TemplatesWhereInput
    orderBy?: TemplatesOrderByWithRelationInput | TemplatesOrderByWithRelationInput[]
    cursor?: TemplatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplatesScalarFieldEnum | TemplatesScalarFieldEnum[]
  }

  /**
   * Companies.users
   */
  export type Companies$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Companies without action
   */
  export type CompaniesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Companies
     */
    omit?: CompaniesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompaniesInclude<ExtArgs> | null
  }


  /**
   * Model Leads
   */

  export type AggregateLeads = {
    _count: LeadsCountAggregateOutputType | null
    _avg: LeadsAvgAggregateOutputType | null
    _sum: LeadsSumAggregateOutputType | null
    _min: LeadsMinAggregateOutputType | null
    _max: LeadsMaxAggregateOutputType | null
  }

  export type LeadsAvgAggregateOutputType = {
    event_id: number | null
    user_id: number | null
    id: number | null
    company_id: number | null
  }

  export type LeadsSumAggregateOutputType = {
    event_id: number | null
    user_id: number | null
    id: number | null
    company_id: number | null
  }

  export type LeadsMinAggregateOutputType = {
    name: string | null
    company: string | null
    email: string | null
    phone: string | null
    linkedin: string | null
    event_id: number | null
    job_role: string | null
    user_id: number | null
    work_area: string | null
    id: number | null
    company_id: number | null
  }

  export type LeadsMaxAggregateOutputType = {
    name: string | null
    company: string | null
    email: string | null
    phone: string | null
    linkedin: string | null
    event_id: number | null
    job_role: string | null
    user_id: number | null
    work_area: string | null
    id: number | null
    company_id: number | null
  }

  export type LeadsCountAggregateOutputType = {
    name: number
    company: number
    email: number
    phone: number
    linkedin: number
    event_id: number
    job_role: number
    user_id: number
    work_area: number
    id: number
    company_id: number
    _all: number
  }


  export type LeadsAvgAggregateInputType = {
    event_id?: true
    user_id?: true
    id?: true
    company_id?: true
  }

  export type LeadsSumAggregateInputType = {
    event_id?: true
    user_id?: true
    id?: true
    company_id?: true
  }

  export type LeadsMinAggregateInputType = {
    name?: true
    company?: true
    email?: true
    phone?: true
    linkedin?: true
    event_id?: true
    job_role?: true
    user_id?: true
    work_area?: true
    id?: true
    company_id?: true
  }

  export type LeadsMaxAggregateInputType = {
    name?: true
    company?: true
    email?: true
    phone?: true
    linkedin?: true
    event_id?: true
    job_role?: true
    user_id?: true
    work_area?: true
    id?: true
    company_id?: true
  }

  export type LeadsCountAggregateInputType = {
    name?: true
    company?: true
    email?: true
    phone?: true
    linkedin?: true
    event_id?: true
    job_role?: true
    user_id?: true
    work_area?: true
    id?: true
    company_id?: true
    _all?: true
  }

  export type LeadsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leads to aggregate.
     */
    where?: LeadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadsOrderByWithRelationInput | LeadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leads
    **/
    _count?: true | LeadsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadsMaxAggregateInputType
  }

  export type GetLeadsAggregateType<T extends LeadsAggregateArgs> = {
        [P in keyof T & keyof AggregateLeads]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeads[P]>
      : GetScalarType<T[P], AggregateLeads[P]>
  }




  export type LeadsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadsWhereInput
    orderBy?: LeadsOrderByWithAggregationInput | LeadsOrderByWithAggregationInput[]
    by: LeadsScalarFieldEnum[] | LeadsScalarFieldEnum
    having?: LeadsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadsCountAggregateInputType | true
    _avg?: LeadsAvgAggregateInputType
    _sum?: LeadsSumAggregateInputType
    _min?: LeadsMinAggregateInputType
    _max?: LeadsMaxAggregateInputType
  }

  export type LeadsGroupByOutputType = {
    name: string
    company: string | null
    email: string
    phone: string | null
    linkedin: string | null
    event_id: number
    job_role: string | null
    user_id: number
    work_area: string | null
    id: number
    company_id: number
    _count: LeadsCountAggregateOutputType | null
    _avg: LeadsAvgAggregateOutputType | null
    _sum: LeadsSumAggregateOutputType | null
    _min: LeadsMinAggregateOutputType | null
    _max: LeadsMaxAggregateOutputType | null
  }

  type GetLeadsGroupByPayload<T extends LeadsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadsGroupByOutputType[P]>
            : GetScalarType<T[P], LeadsGroupByOutputType[P]>
        }
      >
    >


  export type LeadsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    linkedin?: boolean
    event_id?: boolean
    job_role?: boolean
    user_id?: boolean
    work_area?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    events?: boolean | EventsDefaultArgs<ExtArgs>
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leads"]>

  export type LeadsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    linkedin?: boolean
    event_id?: boolean
    job_role?: boolean
    user_id?: boolean
    work_area?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    events?: boolean | EventsDefaultArgs<ExtArgs>
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leads"]>

  export type LeadsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    linkedin?: boolean
    event_id?: boolean
    job_role?: boolean
    user_id?: boolean
    work_area?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    events?: boolean | EventsDefaultArgs<ExtArgs>
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leads"]>

  export type LeadsSelectScalar = {
    name?: boolean
    company?: boolean
    email?: boolean
    phone?: boolean
    linkedin?: boolean
    event_id?: boolean
    job_role?: boolean
    user_id?: boolean
    work_area?: boolean
    id?: boolean
    company_id?: boolean
  }

  export type LeadsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "company" | "email" | "phone" | "linkedin" | "event_id" | "job_role" | "user_id" | "work_area" | "id" | "company_id", ExtArgs["result"]["leads"]>
  export type LeadsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    events?: boolean | EventsDefaultArgs<ExtArgs>
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type LeadsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    events?: boolean | EventsDefaultArgs<ExtArgs>
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type LeadsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    events?: boolean | EventsDefaultArgs<ExtArgs>
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $LeadsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Leads"
    objects: {
      companies: Prisma.$CompaniesPayload<ExtArgs>
      events: Prisma.$EventsPayload<ExtArgs>
      users: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      company: string | null
      email: string
      phone: string | null
      linkedin: string | null
      event_id: number
      job_role: string | null
      user_id: number
      work_area: string | null
      id: number
      company_id: number
    }, ExtArgs["result"]["leads"]>
    composites: {}
  }

  type LeadsGetPayload<S extends boolean | null | undefined | LeadsDefaultArgs> = $Result.GetResult<Prisma.$LeadsPayload, S>

  type LeadsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeadsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeadsCountAggregateInputType | true
    }

  export interface LeadsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Leads'], meta: { name: 'Leads' } }
    /**
     * Find zero or one Leads that matches the filter.
     * @param {LeadsFindUniqueArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadsFindUniqueArgs>(args: SelectSubset<T, LeadsFindUniqueArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Leads that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeadsFindUniqueOrThrowArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadsFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsFindFirstArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadsFindFirstArgs>(args?: SelectSubset<T, LeadsFindFirstArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Leads that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsFindFirstOrThrowArgs} args - Arguments to find a Leads
     * @example
     * // Get one Leads
     * const leads = await prisma.leads.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadsFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadsFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leads
     * const leads = await prisma.leads.findMany()
     * 
     * // Get first 10 Leads
     * const leads = await prisma.leads.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const leadsWithNameOnly = await prisma.leads.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends LeadsFindManyArgs>(args?: SelectSubset<T, LeadsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Leads.
     * @param {LeadsCreateArgs} args - Arguments to create a Leads.
     * @example
     * // Create one Leads
     * const Leads = await prisma.leads.create({
     *   data: {
     *     // ... data to create a Leads
     *   }
     * })
     * 
     */
    create<T extends LeadsCreateArgs>(args: SelectSubset<T, LeadsCreateArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leads.
     * @param {LeadsCreateManyArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const leads = await prisma.leads.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadsCreateManyArgs>(args?: SelectSubset<T, LeadsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leads and returns the data saved in the database.
     * @param {LeadsCreateManyAndReturnArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const leads = await prisma.leads.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leads and only return the `name`
     * const leadsWithNameOnly = await prisma.leads.createManyAndReturn({
     *   select: { name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadsCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Leads.
     * @param {LeadsDeleteArgs} args - Arguments to delete one Leads.
     * @example
     * // Delete one Leads
     * const Leads = await prisma.leads.delete({
     *   where: {
     *     // ... filter to delete one Leads
     *   }
     * })
     * 
     */
    delete<T extends LeadsDeleteArgs>(args: SelectSubset<T, LeadsDeleteArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Leads.
     * @param {LeadsUpdateArgs} args - Arguments to update one Leads.
     * @example
     * // Update one Leads
     * const leads = await prisma.leads.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadsUpdateArgs>(args: SelectSubset<T, LeadsUpdateArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leads.
     * @param {LeadsDeleteManyArgs} args - Arguments to filter Leads to delete.
     * @example
     * // Delete a few Leads
     * const { count } = await prisma.leads.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadsDeleteManyArgs>(args?: SelectSubset<T, LeadsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leads
     * const leads = await prisma.leads.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadsUpdateManyArgs>(args: SelectSubset<T, LeadsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads and returns the data updated in the database.
     * @param {LeadsUpdateManyAndReturnArgs} args - Arguments to update many Leads.
     * @example
     * // Update many Leads
     * const leads = await prisma.leads.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Leads and only return the `name`
     * const leadsWithNameOnly = await prisma.leads.updateManyAndReturn({
     *   select: { name: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeadsUpdateManyAndReturnArgs>(args: SelectSubset<T, LeadsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Leads.
     * @param {LeadsUpsertArgs} args - Arguments to update or create a Leads.
     * @example
     * // Update or create a Leads
     * const leads = await prisma.leads.upsert({
     *   create: {
     *     // ... data to create a Leads
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leads we want to update
     *   }
     * })
     */
    upsert<T extends LeadsUpsertArgs>(args: SelectSubset<T, LeadsUpsertArgs<ExtArgs>>): Prisma__LeadsClient<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsCountArgs} args - Arguments to filter Leads to count.
     * @example
     * // Count the number of Leads
     * const count = await prisma.leads.count({
     *   where: {
     *     // ... the filter for the Leads we want to count
     *   }
     * })
    **/
    count<T extends LeadsCountArgs>(
      args?: Subset<T, LeadsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadsAggregateArgs>(args: Subset<T, LeadsAggregateArgs>): Prisma.PrismaPromise<GetLeadsAggregateType<T>>

    /**
     * Group by Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadsGroupByArgs['orderBy'] }
        : { orderBy?: LeadsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Leads model
   */
  readonly fields: LeadsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Leads.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends CompaniesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompaniesDefaultArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    events<T extends EventsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventsDefaultArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Leads model
   */
  interface LeadsFieldRefs {
    readonly name: FieldRef<"Leads", 'String'>
    readonly company: FieldRef<"Leads", 'String'>
    readonly email: FieldRef<"Leads", 'String'>
    readonly phone: FieldRef<"Leads", 'String'>
    readonly linkedin: FieldRef<"Leads", 'String'>
    readonly event_id: FieldRef<"Leads", 'Int'>
    readonly job_role: FieldRef<"Leads", 'String'>
    readonly user_id: FieldRef<"Leads", 'Int'>
    readonly work_area: FieldRef<"Leads", 'String'>
    readonly id: FieldRef<"Leads", 'Int'>
    readonly company_id: FieldRef<"Leads", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Leads findUnique
   */
  export type LeadsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where: LeadsWhereUniqueInput
  }

  /**
   * Leads findUniqueOrThrow
   */
  export type LeadsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where: LeadsWhereUniqueInput
  }

  /**
   * Leads findFirst
   */
  export type LeadsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where?: LeadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadsOrderByWithRelationInput | LeadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * Leads findFirstOrThrow
   */
  export type LeadsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where?: LeadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadsOrderByWithRelationInput | LeadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * Leads findMany
   */
  export type LeadsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where?: LeadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadsOrderByWithRelationInput | LeadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leads.
     */
    cursor?: LeadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * Leads create
   */
  export type LeadsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * The data needed to create a Leads.
     */
    data: XOR<LeadsCreateInput, LeadsUncheckedCreateInput>
  }

  /**
   * Leads createMany
   */
  export type LeadsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leads.
     */
    data: LeadsCreateManyInput | LeadsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Leads createManyAndReturn
   */
  export type LeadsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * The data used to create many Leads.
     */
    data: LeadsCreateManyInput | LeadsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Leads update
   */
  export type LeadsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * The data needed to update a Leads.
     */
    data: XOR<LeadsUpdateInput, LeadsUncheckedUpdateInput>
    /**
     * Choose, which Leads to update.
     */
    where: LeadsWhereUniqueInput
  }

  /**
   * Leads updateMany
   */
  export type LeadsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadsUpdateManyMutationInput, LeadsUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadsWhereInput
    /**
     * Limit how many Leads to update.
     */
    limit?: number
  }

  /**
   * Leads updateManyAndReturn
   */
  export type LeadsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadsUpdateManyMutationInput, LeadsUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadsWhereInput
    /**
     * Limit how many Leads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Leads upsert
   */
  export type LeadsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * The filter to search for the Leads to update in case it exists.
     */
    where: LeadsWhereUniqueInput
    /**
     * In case the Leads found by the `where` argument doesn't exist, create a new Leads with this data.
     */
    create: XOR<LeadsCreateInput, LeadsUncheckedCreateInput>
    /**
     * In case the Leads was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadsUpdateInput, LeadsUncheckedUpdateInput>
  }

  /**
   * Leads delete
   */
  export type LeadsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    /**
     * Filter which Leads to delete.
     */
    where: LeadsWhereUniqueInput
  }

  /**
   * Leads deleteMany
   */
  export type LeadsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leads to delete
     */
    where?: LeadsWhereInput
    /**
     * Limit how many Leads to delete.
     */
    limit?: number
  }

  /**
   * Leads without action
   */
  export type LeadsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
  }


  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    company_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    company_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    username: string | null
    role: string | null
    password_hash: string | null
    unique_code: string | null
    id: number | null
    company_id: number | null
  }

  export type UsersMaxAggregateOutputType = {
    username: string | null
    role: string | null
    password_hash: string | null
    unique_code: string | null
    id: number | null
    company_id: number | null
  }

  export type UsersCountAggregateOutputType = {
    username: number
    role: number
    password_hash: number
    unique_code: number
    id: number
    company_id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type UsersMinAggregateInputType = {
    username?: true
    role?: true
    password_hash?: true
    unique_code?: true
    id?: true
    company_id?: true
  }

  export type UsersMaxAggregateInputType = {
    username?: true
    role?: true
    password_hash?: true
    unique_code?: true
    id?: true
    company_id?: true
  }

  export type UsersCountAggregateInputType = {
    username?: true
    role?: true
    password_hash?: true
    unique_code?: true
    id?: true
    company_id?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    id: number
    company_id: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    role?: boolean
    password_hash?: boolean
    unique_code?: boolean
    id?: boolean
    company_id?: boolean
    leads?: boolean | Users$leadsArgs<ExtArgs>
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    role?: boolean
    password_hash?: boolean
    unique_code?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    username?: boolean
    role?: boolean
    password_hash?: boolean
    unique_code?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    username?: boolean
    role?: boolean
    password_hash?: boolean
    unique_code?: boolean
    id?: boolean
    company_id?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"username" | "role" | "password_hash" | "unique_code" | "id" | "company_id", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leads?: boolean | Users$leadsArgs<ExtArgs>
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }
  export type UsersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      leads: Prisma.$LeadsPayload<ExtArgs>[]
      companies: Prisma.$CompaniesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      username: string
      role: string
      password_hash: string
      unique_code: string
      id: number
      company_id: number
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const usersWithUsernameOnly = await prisma.users.findMany({ select: { username: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `username`
     * const usersWithUsernameOnly = await prisma.users.createManyAndReturn({
     *   select: { username: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UsersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `username`
     * const usersWithUsernameOnly = await prisma.users.updateManyAndReturn({
     *   select: { username: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsersUpdateManyAndReturnArgs>(args: SelectSubset<T, UsersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    leads<T extends Users$leadsArgs<ExtArgs> = {}>(args?: Subset<T, Users$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companies<T extends CompaniesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompaniesDefaultArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly username: FieldRef<"Users", 'String'>
    readonly role: FieldRef<"Users", 'String'>
    readonly password_hash: FieldRef<"Users", 'String'>
    readonly unique_code: FieldRef<"Users", 'String'>
    readonly id: FieldRef<"Users", 'Int'>
    readonly company_id: FieldRef<"Users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users updateManyAndReturn
   */
  export type UsersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.leads
   */
  export type Users$leadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    where?: LeadsWhereInput
    orderBy?: LeadsOrderByWithRelationInput | LeadsOrderByWithRelationInput[]
    cursor?: LeadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model ContactLog
   */

  export type AggregateContactLog = {
    _count: ContactLogCountAggregateOutputType | null
    _avg: ContactLogAvgAggregateOutputType | null
    _sum: ContactLogSumAggregateOutputType | null
    _min: ContactLogMinAggregateOutputType | null
    _max: ContactLogMaxAggregateOutputType | null
  }

  export type ContactLogAvgAggregateOutputType = {
    id: number | null
    lead_id: number | null
    template_id: number | null
  }

  export type ContactLogSumAggregateOutputType = {
    id: number | null
    lead_id: number | null
    template_id: number | null
  }

  export type ContactLogMinAggregateOutputType = {
    id: number | null
    lead_id: number | null
    template_id: number | null
    update_contacts: Date | null
    statusventa: string | null
  }

  export type ContactLogMaxAggregateOutputType = {
    id: number | null
    lead_id: number | null
    template_id: number | null
    update_contacts: Date | null
    statusventa: string | null
  }

  export type ContactLogCountAggregateOutputType = {
    id: number
    lead_id: number
    template_id: number
    update_contacts: number
    statusventa: number
    _all: number
  }


  export type ContactLogAvgAggregateInputType = {
    id?: true
    lead_id?: true
    template_id?: true
  }

  export type ContactLogSumAggregateInputType = {
    id?: true
    lead_id?: true
    template_id?: true
  }

  export type ContactLogMinAggregateInputType = {
    id?: true
    lead_id?: true
    template_id?: true
    update_contacts?: true
    statusventa?: true
  }

  export type ContactLogMaxAggregateInputType = {
    id?: true
    lead_id?: true
    template_id?: true
    update_contacts?: true
    statusventa?: true
  }

  export type ContactLogCountAggregateInputType = {
    id?: true
    lead_id?: true
    template_id?: true
    update_contacts?: true
    statusventa?: true
    _all?: true
  }

  export type ContactLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactLog to aggregate.
     */
    where?: ContactLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactLogs to fetch.
     */
    orderBy?: ContactLogOrderByWithRelationInput | ContactLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContactLogs
    **/
    _count?: true | ContactLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactLogMaxAggregateInputType
  }

  export type GetContactLogAggregateType<T extends ContactLogAggregateArgs> = {
        [P in keyof T & keyof AggregateContactLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactLog[P]>
      : GetScalarType<T[P], AggregateContactLog[P]>
  }




  export type ContactLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactLogWhereInput
    orderBy?: ContactLogOrderByWithAggregationInput | ContactLogOrderByWithAggregationInput[]
    by: ContactLogScalarFieldEnum[] | ContactLogScalarFieldEnum
    having?: ContactLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactLogCountAggregateInputType | true
    _avg?: ContactLogAvgAggregateInputType
    _sum?: ContactLogSumAggregateInputType
    _min?: ContactLogMinAggregateInputType
    _max?: ContactLogMaxAggregateInputType
  }

  export type ContactLogGroupByOutputType = {
    id: number
    lead_id: number
    template_id: number
    update_contacts: Date
    statusventa: string
    _count: ContactLogCountAggregateOutputType | null
    _avg: ContactLogAvgAggregateOutputType | null
    _sum: ContactLogSumAggregateOutputType | null
    _min: ContactLogMinAggregateOutputType | null
    _max: ContactLogMaxAggregateOutputType | null
  }

  type GetContactLogGroupByPayload<T extends ContactLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactLogGroupByOutputType[P]>
            : GetScalarType<T[P], ContactLogGroupByOutputType[P]>
        }
      >
    >


  export type ContactLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lead_id?: boolean
    template_id?: boolean
    update_contacts?: boolean
    statusventa?: boolean
  }, ExtArgs["result"]["contactLog"]>

  export type ContactLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lead_id?: boolean
    template_id?: boolean
    update_contacts?: boolean
    statusventa?: boolean
  }, ExtArgs["result"]["contactLog"]>

  export type ContactLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lead_id?: boolean
    template_id?: boolean
    update_contacts?: boolean
    statusventa?: boolean
  }, ExtArgs["result"]["contactLog"]>

  export type ContactLogSelectScalar = {
    id?: boolean
    lead_id?: boolean
    template_id?: boolean
    update_contacts?: boolean
    statusventa?: boolean
  }

  export type ContactLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lead_id" | "template_id" | "update_contacts" | "statusventa", ExtArgs["result"]["contactLog"]>

  export type $ContactLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContactLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lead_id: number
      template_id: number
      update_contacts: Date
      statusventa: string
    }, ExtArgs["result"]["contactLog"]>
    composites: {}
  }

  type ContactLogGetPayload<S extends boolean | null | undefined | ContactLogDefaultArgs> = $Result.GetResult<Prisma.$ContactLogPayload, S>

  type ContactLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactLogCountAggregateInputType | true
    }

  export interface ContactLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContactLog'], meta: { name: 'ContactLog' } }
    /**
     * Find zero or one ContactLog that matches the filter.
     * @param {ContactLogFindUniqueArgs} args - Arguments to find a ContactLog
     * @example
     * // Get one ContactLog
     * const contactLog = await prisma.contactLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactLogFindUniqueArgs>(args: SelectSubset<T, ContactLogFindUniqueArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ContactLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactLogFindUniqueOrThrowArgs} args - Arguments to find a ContactLog
     * @example
     * // Get one ContactLog
     * const contactLog = await prisma.contactLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactLogFindFirstArgs} args - Arguments to find a ContactLog
     * @example
     * // Get one ContactLog
     * const contactLog = await prisma.contactLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactLogFindFirstArgs>(args?: SelectSubset<T, ContactLogFindFirstArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ContactLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactLogFindFirstOrThrowArgs} args - Arguments to find a ContactLog
     * @example
     * // Get one ContactLog
     * const contactLog = await prisma.contactLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ContactLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContactLogs
     * const contactLogs = await prisma.contactLog.findMany()
     * 
     * // Get first 10 ContactLogs
     * const contactLogs = await prisma.contactLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactLogWithIdOnly = await prisma.contactLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactLogFindManyArgs>(args?: SelectSubset<T, ContactLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ContactLog.
     * @param {ContactLogCreateArgs} args - Arguments to create a ContactLog.
     * @example
     * // Create one ContactLog
     * const ContactLog = await prisma.contactLog.create({
     *   data: {
     *     // ... data to create a ContactLog
     *   }
     * })
     * 
     */
    create<T extends ContactLogCreateArgs>(args: SelectSubset<T, ContactLogCreateArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ContactLogs.
     * @param {ContactLogCreateManyArgs} args - Arguments to create many ContactLogs.
     * @example
     * // Create many ContactLogs
     * const contactLog = await prisma.contactLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactLogCreateManyArgs>(args?: SelectSubset<T, ContactLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContactLogs and returns the data saved in the database.
     * @param {ContactLogCreateManyAndReturnArgs} args - Arguments to create many ContactLogs.
     * @example
     * // Create many ContactLogs
     * const contactLog = await prisma.contactLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContactLogs and only return the `id`
     * const contactLogWithIdOnly = await prisma.contactLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ContactLog.
     * @param {ContactLogDeleteArgs} args - Arguments to delete one ContactLog.
     * @example
     * // Delete one ContactLog
     * const ContactLog = await prisma.contactLog.delete({
     *   where: {
     *     // ... filter to delete one ContactLog
     *   }
     * })
     * 
     */
    delete<T extends ContactLogDeleteArgs>(args: SelectSubset<T, ContactLogDeleteArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ContactLog.
     * @param {ContactLogUpdateArgs} args - Arguments to update one ContactLog.
     * @example
     * // Update one ContactLog
     * const contactLog = await prisma.contactLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactLogUpdateArgs>(args: SelectSubset<T, ContactLogUpdateArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ContactLogs.
     * @param {ContactLogDeleteManyArgs} args - Arguments to filter ContactLogs to delete.
     * @example
     * // Delete a few ContactLogs
     * const { count } = await prisma.contactLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactLogDeleteManyArgs>(args?: SelectSubset<T, ContactLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContactLogs
     * const contactLog = await prisma.contactLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactLogUpdateManyArgs>(args: SelectSubset<T, ContactLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContactLogs and returns the data updated in the database.
     * @param {ContactLogUpdateManyAndReturnArgs} args - Arguments to update many ContactLogs.
     * @example
     * // Update many ContactLogs
     * const contactLog = await prisma.contactLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ContactLogs and only return the `id`
     * const contactLogWithIdOnly = await prisma.contactLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ContactLog.
     * @param {ContactLogUpsertArgs} args - Arguments to update or create a ContactLog.
     * @example
     * // Update or create a ContactLog
     * const contactLog = await prisma.contactLog.upsert({
     *   create: {
     *     // ... data to create a ContactLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContactLog we want to update
     *   }
     * })
     */
    upsert<T extends ContactLogUpsertArgs>(args: SelectSubset<T, ContactLogUpsertArgs<ExtArgs>>): Prisma__ContactLogClient<$Result.GetResult<Prisma.$ContactLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ContactLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactLogCountArgs} args - Arguments to filter ContactLogs to count.
     * @example
     * // Count the number of ContactLogs
     * const count = await prisma.contactLog.count({
     *   where: {
     *     // ... the filter for the ContactLogs we want to count
     *   }
     * })
    **/
    count<T extends ContactLogCountArgs>(
      args?: Subset<T, ContactLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContactLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactLogAggregateArgs>(args: Subset<T, ContactLogAggregateArgs>): Prisma.PrismaPromise<GetContactLogAggregateType<T>>

    /**
     * Group by ContactLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactLogGroupByArgs['orderBy'] }
        : { orderBy?: ContactLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContactLog model
   */
  readonly fields: ContactLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContactLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContactLog model
   */
  interface ContactLogFieldRefs {
    readonly id: FieldRef<"ContactLog", 'Int'>
    readonly lead_id: FieldRef<"ContactLog", 'Int'>
    readonly template_id: FieldRef<"ContactLog", 'Int'>
    readonly update_contacts: FieldRef<"ContactLog", 'DateTime'>
    readonly statusventa: FieldRef<"ContactLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ContactLog findUnique
   */
  export type ContactLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * Filter, which ContactLog to fetch.
     */
    where: ContactLogWhereUniqueInput
  }

  /**
   * ContactLog findUniqueOrThrow
   */
  export type ContactLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * Filter, which ContactLog to fetch.
     */
    where: ContactLogWhereUniqueInput
  }

  /**
   * ContactLog findFirst
   */
  export type ContactLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * Filter, which ContactLog to fetch.
     */
    where?: ContactLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactLogs to fetch.
     */
    orderBy?: ContactLogOrderByWithRelationInput | ContactLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactLogs.
     */
    cursor?: ContactLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactLogs.
     */
    distinct?: ContactLogScalarFieldEnum | ContactLogScalarFieldEnum[]
  }

  /**
   * ContactLog findFirstOrThrow
   */
  export type ContactLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * Filter, which ContactLog to fetch.
     */
    where?: ContactLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactLogs to fetch.
     */
    orderBy?: ContactLogOrderByWithRelationInput | ContactLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContactLogs.
     */
    cursor?: ContactLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContactLogs.
     */
    distinct?: ContactLogScalarFieldEnum | ContactLogScalarFieldEnum[]
  }

  /**
   * ContactLog findMany
   */
  export type ContactLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * Filter, which ContactLogs to fetch.
     */
    where?: ContactLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContactLogs to fetch.
     */
    orderBy?: ContactLogOrderByWithRelationInput | ContactLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContactLogs.
     */
    cursor?: ContactLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContactLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContactLogs.
     */
    skip?: number
    distinct?: ContactLogScalarFieldEnum | ContactLogScalarFieldEnum[]
  }

  /**
   * ContactLog create
   */
  export type ContactLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * The data needed to create a ContactLog.
     */
    data: XOR<ContactLogCreateInput, ContactLogUncheckedCreateInput>
  }

  /**
   * ContactLog createMany
   */
  export type ContactLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContactLogs.
     */
    data: ContactLogCreateManyInput | ContactLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactLog createManyAndReturn
   */
  export type ContactLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * The data used to create many ContactLogs.
     */
    data: ContactLogCreateManyInput | ContactLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContactLog update
   */
  export type ContactLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * The data needed to update a ContactLog.
     */
    data: XOR<ContactLogUpdateInput, ContactLogUncheckedUpdateInput>
    /**
     * Choose, which ContactLog to update.
     */
    where: ContactLogWhereUniqueInput
  }

  /**
   * ContactLog updateMany
   */
  export type ContactLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContactLogs.
     */
    data: XOR<ContactLogUpdateManyMutationInput, ContactLogUncheckedUpdateManyInput>
    /**
     * Filter which ContactLogs to update
     */
    where?: ContactLogWhereInput
    /**
     * Limit how many ContactLogs to update.
     */
    limit?: number
  }

  /**
   * ContactLog updateManyAndReturn
   */
  export type ContactLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * The data used to update ContactLogs.
     */
    data: XOR<ContactLogUpdateManyMutationInput, ContactLogUncheckedUpdateManyInput>
    /**
     * Filter which ContactLogs to update
     */
    where?: ContactLogWhereInput
    /**
     * Limit how many ContactLogs to update.
     */
    limit?: number
  }

  /**
   * ContactLog upsert
   */
  export type ContactLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * The filter to search for the ContactLog to update in case it exists.
     */
    where: ContactLogWhereUniqueInput
    /**
     * In case the ContactLog found by the `where` argument doesn't exist, create a new ContactLog with this data.
     */
    create: XOR<ContactLogCreateInput, ContactLogUncheckedCreateInput>
    /**
     * In case the ContactLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactLogUpdateInput, ContactLogUncheckedUpdateInput>
  }

  /**
   * ContactLog delete
   */
  export type ContactLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
    /**
     * Filter which ContactLog to delete.
     */
    where: ContactLogWhereUniqueInput
  }

  /**
   * ContactLog deleteMany
   */
  export type ContactLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContactLogs to delete
     */
    where?: ContactLogWhereInput
    /**
     * Limit how many ContactLogs to delete.
     */
    limit?: number
  }

  /**
   * ContactLog without action
   */
  export type ContactLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactLog
     */
    select?: ContactLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ContactLog
     */
    omit?: ContactLogOmit<ExtArgs> | null
  }


  /**
   * Model Templates
   */

  export type AggregateTemplates = {
    _count: TemplatesCountAggregateOutputType | null
    _avg: TemplatesAvgAggregateOutputType | null
    _sum: TemplatesSumAggregateOutputType | null
    _min: TemplatesMinAggregateOutputType | null
    _max: TemplatesMaxAggregateOutputType | null
  }

  export type TemplatesAvgAggregateOutputType = {
    id: number | null
    company_id: number | null
  }

  export type TemplatesSumAggregateOutputType = {
    id: number | null
    company_id: number | null
  }

  export type TemplatesMinAggregateOutputType = {
    name: string | null
    body: string | null
    createdAt: Date | null
    updatedAt: Date | null
    scheduled: string | null
    active: boolean | null
    deletedAt: Date | null
    id: number | null
    company_id: number | null
  }

  export type TemplatesMaxAggregateOutputType = {
    name: string | null
    body: string | null
    createdAt: Date | null
    updatedAt: Date | null
    scheduled: string | null
    active: boolean | null
    deletedAt: Date | null
    id: number | null
    company_id: number | null
  }

  export type TemplatesCountAggregateOutputType = {
    name: number
    body: number
    createdAt: number
    updatedAt: number
    scheduled: number
    active: number
    deletedAt: number
    id: number
    company_id: number
    _all: number
  }


  export type TemplatesAvgAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type TemplatesSumAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type TemplatesMinAggregateInputType = {
    name?: true
    body?: true
    createdAt?: true
    updatedAt?: true
    scheduled?: true
    active?: true
    deletedAt?: true
    id?: true
    company_id?: true
  }

  export type TemplatesMaxAggregateInputType = {
    name?: true
    body?: true
    createdAt?: true
    updatedAt?: true
    scheduled?: true
    active?: true
    deletedAt?: true
    id?: true
    company_id?: true
  }

  export type TemplatesCountAggregateInputType = {
    name?: true
    body?: true
    createdAt?: true
    updatedAt?: true
    scheduled?: true
    active?: true
    deletedAt?: true
    id?: true
    company_id?: true
    _all?: true
  }

  export type TemplatesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Templates to aggregate.
     */
    where?: TemplatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplatesOrderByWithRelationInput | TemplatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Templates
    **/
    _count?: true | TemplatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemplatesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemplatesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplatesMaxAggregateInputType
  }

  export type GetTemplatesAggregateType<T extends TemplatesAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplates[P]>
      : GetScalarType<T[P], AggregateTemplates[P]>
  }




  export type TemplatesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplatesWhereInput
    orderBy?: TemplatesOrderByWithAggregationInput | TemplatesOrderByWithAggregationInput[]
    by: TemplatesScalarFieldEnum[] | TemplatesScalarFieldEnum
    having?: TemplatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplatesCountAggregateInputType | true
    _avg?: TemplatesAvgAggregateInputType
    _sum?: TemplatesSumAggregateInputType
    _min?: TemplatesMinAggregateInputType
    _max?: TemplatesMaxAggregateInputType
  }

  export type TemplatesGroupByOutputType = {
    name: string
    body: string
    createdAt: Date
    updatedAt: Date
    scheduled: string | null
    active: boolean
    deletedAt: Date | null
    id: number
    company_id: number
    _count: TemplatesCountAggregateOutputType | null
    _avg: TemplatesAvgAggregateOutputType | null
    _sum: TemplatesSumAggregateOutputType | null
    _min: TemplatesMinAggregateOutputType | null
    _max: TemplatesMaxAggregateOutputType | null
  }

  type GetTemplatesGroupByPayload<T extends TemplatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplatesGroupByOutputType[P]>
            : GetScalarType<T[P], TemplatesGroupByOutputType[P]>
        }
      >
    >


  export type TemplatesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    body?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scheduled?: boolean
    active?: boolean
    deletedAt?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templates"]>

  export type TemplatesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    body?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scheduled?: boolean
    active?: boolean
    deletedAt?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templates"]>

  export type TemplatesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    body?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scheduled?: boolean
    active?: boolean
    deletedAt?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["templates"]>

  export type TemplatesSelectScalar = {
    name?: boolean
    body?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scheduled?: boolean
    active?: boolean
    deletedAt?: boolean
    id?: boolean
    company_id?: boolean
  }

  export type TemplatesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "body" | "createdAt" | "updatedAt" | "scheduled" | "active" | "deletedAt" | "id" | "company_id", ExtArgs["result"]["templates"]>
  export type TemplatesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }
  export type TemplatesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }
  export type TemplatesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }

  export type $TemplatesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Templates"
    objects: {
      companies: Prisma.$CompaniesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      body: string
      createdAt: Date
      updatedAt: Date
      scheduled: string | null
      active: boolean
      deletedAt: Date | null
      id: number
      company_id: number
    }, ExtArgs["result"]["templates"]>
    composites: {}
  }

  type TemplatesGetPayload<S extends boolean | null | undefined | TemplatesDefaultArgs> = $Result.GetResult<Prisma.$TemplatesPayload, S>

  type TemplatesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TemplatesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TemplatesCountAggregateInputType | true
    }

  export interface TemplatesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Templates'], meta: { name: 'Templates' } }
    /**
     * Find zero or one Templates that matches the filter.
     * @param {TemplatesFindUniqueArgs} args - Arguments to find a Templates
     * @example
     * // Get one Templates
     * const templates = await prisma.templates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplatesFindUniqueArgs>(args: SelectSubset<T, TemplatesFindUniqueArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Templates that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TemplatesFindUniqueOrThrowArgs} args - Arguments to find a Templates
     * @example
     * // Get one Templates
     * const templates = await prisma.templates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplatesFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplatesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplatesFindFirstArgs} args - Arguments to find a Templates
     * @example
     * // Get one Templates
     * const templates = await prisma.templates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplatesFindFirstArgs>(args?: SelectSubset<T, TemplatesFindFirstArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Templates that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplatesFindFirstOrThrowArgs} args - Arguments to find a Templates
     * @example
     * // Get one Templates
     * const templates = await prisma.templates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplatesFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplatesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplatesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Templates
     * const templates = await prisma.templates.findMany()
     * 
     * // Get first 10 Templates
     * const templates = await prisma.templates.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const templatesWithNameOnly = await prisma.templates.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends TemplatesFindManyArgs>(args?: SelectSubset<T, TemplatesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Templates.
     * @param {TemplatesCreateArgs} args - Arguments to create a Templates.
     * @example
     * // Create one Templates
     * const Templates = await prisma.templates.create({
     *   data: {
     *     // ... data to create a Templates
     *   }
     * })
     * 
     */
    create<T extends TemplatesCreateArgs>(args: SelectSubset<T, TemplatesCreateArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Templates.
     * @param {TemplatesCreateManyArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const templates = await prisma.templates.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplatesCreateManyArgs>(args?: SelectSubset<T, TemplatesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Templates and returns the data saved in the database.
     * @param {TemplatesCreateManyAndReturnArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const templates = await prisma.templates.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Templates and only return the `name`
     * const templatesWithNameOnly = await prisma.templates.createManyAndReturn({
     *   select: { name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplatesCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplatesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Templates.
     * @param {TemplatesDeleteArgs} args - Arguments to delete one Templates.
     * @example
     * // Delete one Templates
     * const Templates = await prisma.templates.delete({
     *   where: {
     *     // ... filter to delete one Templates
     *   }
     * })
     * 
     */
    delete<T extends TemplatesDeleteArgs>(args: SelectSubset<T, TemplatesDeleteArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Templates.
     * @param {TemplatesUpdateArgs} args - Arguments to update one Templates.
     * @example
     * // Update one Templates
     * const templates = await prisma.templates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplatesUpdateArgs>(args: SelectSubset<T, TemplatesUpdateArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Templates.
     * @param {TemplatesDeleteManyArgs} args - Arguments to filter Templates to delete.
     * @example
     * // Delete a few Templates
     * const { count } = await prisma.templates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplatesDeleteManyArgs>(args?: SelectSubset<T, TemplatesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Templates
     * const templates = await prisma.templates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplatesUpdateManyArgs>(args: SelectSubset<T, TemplatesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Templates and returns the data updated in the database.
     * @param {TemplatesUpdateManyAndReturnArgs} args - Arguments to update many Templates.
     * @example
     * // Update many Templates
     * const templates = await prisma.templates.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Templates and only return the `name`
     * const templatesWithNameOnly = await prisma.templates.updateManyAndReturn({
     *   select: { name: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TemplatesUpdateManyAndReturnArgs>(args: SelectSubset<T, TemplatesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Templates.
     * @param {TemplatesUpsertArgs} args - Arguments to update or create a Templates.
     * @example
     * // Update or create a Templates
     * const templates = await prisma.templates.upsert({
     *   create: {
     *     // ... data to create a Templates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Templates we want to update
     *   }
     * })
     */
    upsert<T extends TemplatesUpsertArgs>(args: SelectSubset<T, TemplatesUpsertArgs<ExtArgs>>): Prisma__TemplatesClient<$Result.GetResult<Prisma.$TemplatesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplatesCountArgs} args - Arguments to filter Templates to count.
     * @example
     * // Count the number of Templates
     * const count = await prisma.templates.count({
     *   where: {
     *     // ... the filter for the Templates we want to count
     *   }
     * })
    **/
    count<T extends TemplatesCountArgs>(
      args?: Subset<T, TemplatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplatesAggregateArgs>(args: Subset<T, TemplatesAggregateArgs>): Prisma.PrismaPromise<GetTemplatesAggregateType<T>>

    /**
     * Group by Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplatesGroupByArgs['orderBy'] }
        : { orderBy?: TemplatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Templates model
   */
  readonly fields: TemplatesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Templates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplatesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends CompaniesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompaniesDefaultArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Templates model
   */
  interface TemplatesFieldRefs {
    readonly name: FieldRef<"Templates", 'String'>
    readonly body: FieldRef<"Templates", 'String'>
    readonly createdAt: FieldRef<"Templates", 'DateTime'>
    readonly updatedAt: FieldRef<"Templates", 'DateTime'>
    readonly scheduled: FieldRef<"Templates", 'String'>
    readonly active: FieldRef<"Templates", 'Boolean'>
    readonly deletedAt: FieldRef<"Templates", 'DateTime'>
    readonly id: FieldRef<"Templates", 'Int'>
    readonly company_id: FieldRef<"Templates", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Templates findUnique
   */
  export type TemplatesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where: TemplatesWhereUniqueInput
  }

  /**
   * Templates findUniqueOrThrow
   */
  export type TemplatesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where: TemplatesWhereUniqueInput
  }

  /**
   * Templates findFirst
   */
  export type TemplatesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where?: TemplatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplatesOrderByWithRelationInput | TemplatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplatesScalarFieldEnum | TemplatesScalarFieldEnum[]
  }

  /**
   * Templates findFirstOrThrow
   */
  export type TemplatesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where?: TemplatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplatesOrderByWithRelationInput | TemplatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplatesScalarFieldEnum | TemplatesScalarFieldEnum[]
  }

  /**
   * Templates findMany
   */
  export type TemplatesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where?: TemplatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplatesOrderByWithRelationInput | TemplatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Templates.
     */
    cursor?: TemplatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    distinct?: TemplatesScalarFieldEnum | TemplatesScalarFieldEnum[]
  }

  /**
   * Templates create
   */
  export type TemplatesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * The data needed to create a Templates.
     */
    data: XOR<TemplatesCreateInput, TemplatesUncheckedCreateInput>
  }

  /**
   * Templates createMany
   */
  export type TemplatesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Templates.
     */
    data: TemplatesCreateManyInput | TemplatesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Templates createManyAndReturn
   */
  export type TemplatesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * The data used to create many Templates.
     */
    data: TemplatesCreateManyInput | TemplatesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Templates update
   */
  export type TemplatesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * The data needed to update a Templates.
     */
    data: XOR<TemplatesUpdateInput, TemplatesUncheckedUpdateInput>
    /**
     * Choose, which Templates to update.
     */
    where: TemplatesWhereUniqueInput
  }

  /**
   * Templates updateMany
   */
  export type TemplatesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Templates.
     */
    data: XOR<TemplatesUpdateManyMutationInput, TemplatesUncheckedUpdateManyInput>
    /**
     * Filter which Templates to update
     */
    where?: TemplatesWhereInput
    /**
     * Limit how many Templates to update.
     */
    limit?: number
  }

  /**
   * Templates updateManyAndReturn
   */
  export type TemplatesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * The data used to update Templates.
     */
    data: XOR<TemplatesUpdateManyMutationInput, TemplatesUncheckedUpdateManyInput>
    /**
     * Filter which Templates to update
     */
    where?: TemplatesWhereInput
    /**
     * Limit how many Templates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Templates upsert
   */
  export type TemplatesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * The filter to search for the Templates to update in case it exists.
     */
    where: TemplatesWhereUniqueInput
    /**
     * In case the Templates found by the `where` argument doesn't exist, create a new Templates with this data.
     */
    create: XOR<TemplatesCreateInput, TemplatesUncheckedCreateInput>
    /**
     * In case the Templates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplatesUpdateInput, TemplatesUncheckedUpdateInput>
  }

  /**
   * Templates delete
   */
  export type TemplatesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
    /**
     * Filter which Templates to delete.
     */
    where: TemplatesWhereUniqueInput
  }

  /**
   * Templates deleteMany
   */
  export type TemplatesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Templates to delete
     */
    where?: TemplatesWhereInput
    /**
     * Limit how many Templates to delete.
     */
    limit?: number
  }

  /**
   * Templates without action
   */
  export type TemplatesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Templates
     */
    select?: TemplatesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Templates
     */
    omit?: TemplatesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplatesInclude<ExtArgs> | null
  }


  /**
   * Model Events
   */

  export type AggregateEvents = {
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  export type EventsAvgAggregateOutputType = {
    id: number | null
    company_id: number | null
  }

  export type EventsSumAggregateOutputType = {
    id: number | null
    company_id: number | null
  }

  export type EventsMinAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
    fecha: Date | null
    location: string | null
    name: string | null
    type: string | null
    id: number | null
    company_id: number | null
  }

  export type EventsMaxAggregateOutputType = {
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
    fecha: Date | null
    location: string | null
    name: string | null
    type: string | null
    id: number | null
    company_id: number | null
  }

  export type EventsCountAggregateOutputType = {
    createdAt: number
    updatedAt: number
    description: number
    fecha: number
    location: number
    name: number
    type: number
    id: number
    company_id: number
    _all: number
  }


  export type EventsAvgAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type EventsSumAggregateInputType = {
    id?: true
    company_id?: true
  }

  export type EventsMinAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    description?: true
    fecha?: true
    location?: true
    name?: true
    type?: true
    id?: true
    company_id?: true
  }

  export type EventsMaxAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    description?: true
    fecha?: true
    location?: true
    name?: true
    type?: true
    id?: true
    company_id?: true
  }

  export type EventsCountAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    description?: true
    fecha?: true
    location?: true
    name?: true
    type?: true
    id?: true
    company_id?: true
    _all?: true
  }

  export type EventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to aggregate.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventsMaxAggregateInputType
  }

  export type GetEventsAggregateType<T extends EventsAggregateArgs> = {
        [P in keyof T & keyof AggregateEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvents[P]>
      : GetScalarType<T[P], AggregateEvents[P]>
  }




  export type EventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventsWhereInput
    orderBy?: EventsOrderByWithAggregationInput | EventsOrderByWithAggregationInput[]
    by: EventsScalarFieldEnum[] | EventsScalarFieldEnum
    having?: EventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventsCountAggregateInputType | true
    _avg?: EventsAvgAggregateInputType
    _sum?: EventsSumAggregateInputType
    _min?: EventsMinAggregateInputType
    _max?: EventsMaxAggregateInputType
  }

  export type EventsGroupByOutputType = {
    createdAt: Date
    updatedAt: Date
    description: string
    fecha: Date
    location: string
    name: string
    type: string
    id: number
    company_id: number
    _count: EventsCountAggregateOutputType | null
    _avg: EventsAvgAggregateOutputType | null
    _sum: EventsSumAggregateOutputType | null
    _min: EventsMinAggregateOutputType | null
    _max: EventsMaxAggregateOutputType | null
  }

  type GetEventsGroupByPayload<T extends EventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventsGroupByOutputType[P]>
            : GetScalarType<T[P], EventsGroupByOutputType[P]>
        }
      >
    >


  export type EventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    fecha?: boolean
    location?: boolean
    name?: boolean
    type?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    leads?: boolean | Events$leadsArgs<ExtArgs>
    _count?: boolean | EventsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["events"]>

  export type EventsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    fecha?: boolean
    location?: boolean
    name?: boolean
    type?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["events"]>

  export type EventsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    fecha?: boolean
    location?: boolean
    name?: boolean
    type?: boolean
    id?: boolean
    company_id?: boolean
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["events"]>

  export type EventsSelectScalar = {
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    fecha?: boolean
    location?: boolean
    name?: boolean
    type?: boolean
    id?: boolean
    company_id?: boolean
  }

  export type EventsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"createdAt" | "updatedAt" | "description" | "fecha" | "location" | "name" | "type" | "id" | "company_id", ExtArgs["result"]["events"]>
  export type EventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
    leads?: boolean | Events$leadsArgs<ExtArgs>
    _count?: boolean | EventsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }
  export type EventsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | CompaniesDefaultArgs<ExtArgs>
  }

  export type $EventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Events"
    objects: {
      companies: Prisma.$CompaniesPayload<ExtArgs>
      leads: Prisma.$LeadsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      createdAt: Date
      updatedAt: Date
      description: string
      fecha: Date
      location: string
      name: string
      type: string
      id: number
      company_id: number
    }, ExtArgs["result"]["events"]>
    composites: {}
  }

  type EventsGetPayload<S extends boolean | null | undefined | EventsDefaultArgs> = $Result.GetResult<Prisma.$EventsPayload, S>

  type EventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventsCountAggregateInputType | true
    }

  export interface EventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Events'], meta: { name: 'Events' } }
    /**
     * Find zero or one Events that matches the filter.
     * @param {EventsFindUniqueArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventsFindUniqueArgs>(args: SelectSubset<T, EventsFindUniqueArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Events that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventsFindUniqueOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventsFindUniqueOrThrowArgs>(args: SelectSubset<T, EventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventsFindFirstArgs>(args?: SelectSubset<T, EventsFindFirstArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Events that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindFirstOrThrowArgs} args - Arguments to find a Events
     * @example
     * // Get one Events
     * const events = await prisma.events.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventsFindFirstOrThrowArgs>(args?: SelectSubset<T, EventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.events.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.events.findMany({ take: 10 })
     * 
     * // Only select the `createdAt`
     * const eventsWithCreatedAtOnly = await prisma.events.findMany({ select: { createdAt: true } })
     * 
     */
    findMany<T extends EventsFindManyArgs>(args?: SelectSubset<T, EventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Events.
     * @param {EventsCreateArgs} args - Arguments to create a Events.
     * @example
     * // Create one Events
     * const Events = await prisma.events.create({
     *   data: {
     *     // ... data to create a Events
     *   }
     * })
     * 
     */
    create<T extends EventsCreateArgs>(args: SelectSubset<T, EventsCreateArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Events.
     * @param {EventsCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const events = await prisma.events.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventsCreateManyArgs>(args?: SelectSubset<T, EventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventsCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const events = await prisma.events.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `createdAt`
     * const eventsWithCreatedAtOnly = await prisma.events.createManyAndReturn({
     *   select: { createdAt: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventsCreateManyAndReturnArgs>(args?: SelectSubset<T, EventsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Events.
     * @param {EventsDeleteArgs} args - Arguments to delete one Events.
     * @example
     * // Delete one Events
     * const Events = await prisma.events.delete({
     *   where: {
     *     // ... filter to delete one Events
     *   }
     * })
     * 
     */
    delete<T extends EventsDeleteArgs>(args: SelectSubset<T, EventsDeleteArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Events.
     * @param {EventsUpdateArgs} args - Arguments to update one Events.
     * @example
     * // Update one Events
     * const events = await prisma.events.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventsUpdateArgs>(args: SelectSubset<T, EventsUpdateArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Events.
     * @param {EventsDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.events.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventsDeleteManyArgs>(args?: SelectSubset<T, EventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const events = await prisma.events.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventsUpdateManyArgs>(args: SelectSubset<T, EventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events and returns the data updated in the database.
     * @param {EventsUpdateManyAndReturnArgs} args - Arguments to update many Events.
     * @example
     * // Update many Events
     * const events = await prisma.events.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Events and only return the `createdAt`
     * const eventsWithCreatedAtOnly = await prisma.events.updateManyAndReturn({
     *   select: { createdAt: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EventsUpdateManyAndReturnArgs>(args: SelectSubset<T, EventsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Events.
     * @param {EventsUpsertArgs} args - Arguments to update or create a Events.
     * @example
     * // Update or create a Events
     * const events = await prisma.events.upsert({
     *   create: {
     *     // ... data to create a Events
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Events we want to update
     *   }
     * })
     */
    upsert<T extends EventsUpsertArgs>(args: SelectSubset<T, EventsUpsertArgs<ExtArgs>>): Prisma__EventsClient<$Result.GetResult<Prisma.$EventsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.events.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventsCountArgs>(
      args?: Subset<T, EventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventsAggregateArgs>(args: Subset<T, EventsAggregateArgs>): Prisma.PrismaPromise<GetEventsAggregateType<T>>

    /**
     * Group by Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventsGroupByArgs['orderBy'] }
        : { orderBy?: EventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Events model
   */
  readonly fields: EventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Events.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends CompaniesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompaniesDefaultArgs<ExtArgs>>): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    leads<T extends Events$leadsArgs<ExtArgs> = {}>(args?: Subset<T, Events$leadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Events model
   */
  interface EventsFieldRefs {
    readonly createdAt: FieldRef<"Events", 'DateTime'>
    readonly updatedAt: FieldRef<"Events", 'DateTime'>
    readonly description: FieldRef<"Events", 'String'>
    readonly fecha: FieldRef<"Events", 'DateTime'>
    readonly location: FieldRef<"Events", 'String'>
    readonly name: FieldRef<"Events", 'String'>
    readonly type: FieldRef<"Events", 'String'>
    readonly id: FieldRef<"Events", 'Int'>
    readonly company_id: FieldRef<"Events", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Events findUnique
   */
  export type EventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events findUniqueOrThrow
   */
  export type EventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events findFirst
   */
  export type EventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events findFirstOrThrow
   */
  export type EventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events findMany
   */
  export type EventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventsOrderByWithRelationInput | EventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventsScalarFieldEnum | EventsScalarFieldEnum[]
  }

  /**
   * Events create
   */
  export type EventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The data needed to create a Events.
     */
    data: XOR<EventsCreateInput, EventsUncheckedCreateInput>
  }

  /**
   * Events createMany
   */
  export type EventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventsCreateManyInput | EventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Events createManyAndReturn
   */
  export type EventsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventsCreateManyInput | EventsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Events update
   */
  export type EventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The data needed to update a Events.
     */
    data: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
    /**
     * Choose, which Events to update.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events updateMany
   */
  export type EventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventsUpdateManyMutationInput, EventsUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventsWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
  }

  /**
   * Events updateManyAndReturn
   */
  export type EventsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * The data used to update Events.
     */
    data: XOR<EventsUpdateManyMutationInput, EventsUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventsWhereInput
    /**
     * Limit how many Events to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Events upsert
   */
  export type EventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * The filter to search for the Events to update in case it exists.
     */
    where: EventsWhereUniqueInput
    /**
     * In case the Events found by the `where` argument doesn't exist, create a new Events with this data.
     */
    create: XOR<EventsCreateInput, EventsUncheckedCreateInput>
    /**
     * In case the Events was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventsUpdateInput, EventsUncheckedUpdateInput>
  }

  /**
   * Events delete
   */
  export type EventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
    /**
     * Filter which Events to delete.
     */
    where: EventsWhereUniqueInput
  }

  /**
   * Events deleteMany
   */
  export type EventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventsWhereInput
    /**
     * Limit how many Events to delete.
     */
    limit?: number
  }

  /**
   * Events.leads
   */
  export type Events$leadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leads
     */
    select?: LeadsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Leads
     */
    omit?: LeadsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadsInclude<ExtArgs> | null
    where?: LeadsWhereInput
    orderBy?: LeadsOrderByWithRelationInput | LeadsOrderByWithRelationInput[]
    cursor?: LeadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadsScalarFieldEnum | LeadsScalarFieldEnum[]
  }

  /**
   * Events without action
   */
  export type EventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Events
     */
    select?: EventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Events
     */
    omit?: EventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompaniesScalarFieldEnum: {
    name: 'name',
    country: 'country',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    employee_numbers: 'employee_numbers',
    ruc: 'ruc',
    sector: 'sector',
    id: 'id'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const LeadsScalarFieldEnum: {
    name: 'name',
    company: 'company',
    email: 'email',
    phone: 'phone',
    linkedin: 'linkedin',
    event_id: 'event_id',
    job_role: 'job_role',
    user_id: 'user_id',
    work_area: 'work_area',
    id: 'id',
    company_id: 'company_id'
  };

  export type LeadsScalarFieldEnum = (typeof LeadsScalarFieldEnum)[keyof typeof LeadsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    username: 'username',
    role: 'role',
    password_hash: 'password_hash',
    unique_code: 'unique_code',
    id: 'id',
    company_id: 'company_id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ContactLogScalarFieldEnum: {
    id: 'id',
    lead_id: 'lead_id',
    template_id: 'template_id',
    update_contacts: 'update_contacts',
    statusventa: 'statusventa'
  };

  export type ContactLogScalarFieldEnum = (typeof ContactLogScalarFieldEnum)[keyof typeof ContactLogScalarFieldEnum]


  export const TemplatesScalarFieldEnum: {
    name: 'name',
    body: 'body',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    scheduled: 'scheduled',
    active: 'active',
    deletedAt: 'deletedAt',
    id: 'id',
    company_id: 'company_id'
  };

  export type TemplatesScalarFieldEnum = (typeof TemplatesScalarFieldEnum)[keyof typeof TemplatesScalarFieldEnum]


  export const EventsScalarFieldEnum: {
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    description: 'description',
    fecha: 'fecha',
    location: 'location',
    name: 'name',
    type: 'type',
    id: 'id',
    company_id: 'company_id'
  };

  export type EventsScalarFieldEnum = (typeof EventsScalarFieldEnum)[keyof typeof EventsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type CompaniesWhereInput = {
    AND?: CompaniesWhereInput | CompaniesWhereInput[]
    OR?: CompaniesWhereInput[]
    NOT?: CompaniesWhereInput | CompaniesWhereInput[]
    name?: StringFilter<"Companies"> | string
    country?: StringFilter<"Companies"> | string
    createdAt?: DateTimeFilter<"Companies"> | Date | string
    updatedAt?: DateTimeFilter<"Companies"> | Date | string
    employee_numbers?: FloatNullableFilter<"Companies"> | number | null
    ruc?: FloatNullableFilter<"Companies"> | number | null
    sector?: StringFilter<"Companies"> | string
    id?: IntFilter<"Companies"> | number
    events?: EventsListRelationFilter
    leads?: LeadsListRelationFilter
    templates?: TemplatesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type CompaniesOrderByWithRelationInput = {
    name?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee_numbers?: SortOrderInput | SortOrder
    ruc?: SortOrderInput | SortOrder
    sector?: SortOrder
    id?: SortOrder
    events?: EventsOrderByRelationAggregateInput
    leads?: LeadsOrderByRelationAggregateInput
    templates?: TemplatesOrderByRelationAggregateInput
    users?: UsersOrderByRelationAggregateInput
  }

  export type CompaniesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompaniesWhereInput | CompaniesWhereInput[]
    OR?: CompaniesWhereInput[]
    NOT?: CompaniesWhereInput | CompaniesWhereInput[]
    name?: StringFilter<"Companies"> | string
    country?: StringFilter<"Companies"> | string
    createdAt?: DateTimeFilter<"Companies"> | Date | string
    updatedAt?: DateTimeFilter<"Companies"> | Date | string
    employee_numbers?: FloatNullableFilter<"Companies"> | number | null
    ruc?: FloatNullableFilter<"Companies"> | number | null
    sector?: StringFilter<"Companies"> | string
    events?: EventsListRelationFilter
    leads?: LeadsListRelationFilter
    templates?: TemplatesListRelationFilter
    users?: UsersListRelationFilter
  }, "id">

  export type CompaniesOrderByWithAggregationInput = {
    name?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee_numbers?: SortOrderInput | SortOrder
    ruc?: SortOrderInput | SortOrder
    sector?: SortOrder
    id?: SortOrder
    _count?: CompaniesCountOrderByAggregateInput
    _avg?: CompaniesAvgOrderByAggregateInput
    _max?: CompaniesMaxOrderByAggregateInput
    _min?: CompaniesMinOrderByAggregateInput
    _sum?: CompaniesSumOrderByAggregateInput
  }

  export type CompaniesScalarWhereWithAggregatesInput = {
    AND?: CompaniesScalarWhereWithAggregatesInput | CompaniesScalarWhereWithAggregatesInput[]
    OR?: CompaniesScalarWhereWithAggregatesInput[]
    NOT?: CompaniesScalarWhereWithAggregatesInput | CompaniesScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Companies"> | string
    country?: StringWithAggregatesFilter<"Companies"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Companies"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Companies"> | Date | string
    employee_numbers?: FloatNullableWithAggregatesFilter<"Companies"> | number | null
    ruc?: FloatNullableWithAggregatesFilter<"Companies"> | number | null
    sector?: StringWithAggregatesFilter<"Companies"> | string
    id?: IntWithAggregatesFilter<"Companies"> | number
  }

  export type LeadsWhereInput = {
    AND?: LeadsWhereInput | LeadsWhereInput[]
    OR?: LeadsWhereInput[]
    NOT?: LeadsWhereInput | LeadsWhereInput[]
    name?: StringFilter<"Leads"> | string
    company?: StringNullableFilter<"Leads"> | string | null
    email?: StringFilter<"Leads"> | string
    phone?: StringNullableFilter<"Leads"> | string | null
    linkedin?: StringNullableFilter<"Leads"> | string | null
    event_id?: IntFilter<"Leads"> | number
    job_role?: StringNullableFilter<"Leads"> | string | null
    user_id?: IntFilter<"Leads"> | number
    work_area?: StringNullableFilter<"Leads"> | string | null
    id?: IntFilter<"Leads"> | number
    company_id?: IntFilter<"Leads"> | number
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
    events?: XOR<EventsScalarRelationFilter, EventsWhereInput>
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type LeadsOrderByWithRelationInput = {
    name?: SortOrder
    company?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    event_id?: SortOrder
    job_role?: SortOrderInput | SortOrder
    user_id?: SortOrder
    work_area?: SortOrderInput | SortOrder
    id?: SortOrder
    company_id?: SortOrder
    companies?: CompaniesOrderByWithRelationInput
    events?: EventsOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type LeadsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeadsWhereInput | LeadsWhereInput[]
    OR?: LeadsWhereInput[]
    NOT?: LeadsWhereInput | LeadsWhereInput[]
    name?: StringFilter<"Leads"> | string
    company?: StringNullableFilter<"Leads"> | string | null
    email?: StringFilter<"Leads"> | string
    phone?: StringNullableFilter<"Leads"> | string | null
    linkedin?: StringNullableFilter<"Leads"> | string | null
    event_id?: IntFilter<"Leads"> | number
    job_role?: StringNullableFilter<"Leads"> | string | null
    user_id?: IntFilter<"Leads"> | number
    work_area?: StringNullableFilter<"Leads"> | string | null
    company_id?: IntFilter<"Leads"> | number
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
    events?: XOR<EventsScalarRelationFilter, EventsWhereInput>
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type LeadsOrderByWithAggregationInput = {
    name?: SortOrder
    company?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    linkedin?: SortOrderInput | SortOrder
    event_id?: SortOrder
    job_role?: SortOrderInput | SortOrder
    user_id?: SortOrder
    work_area?: SortOrderInput | SortOrder
    id?: SortOrder
    company_id?: SortOrder
    _count?: LeadsCountOrderByAggregateInput
    _avg?: LeadsAvgOrderByAggregateInput
    _max?: LeadsMaxOrderByAggregateInput
    _min?: LeadsMinOrderByAggregateInput
    _sum?: LeadsSumOrderByAggregateInput
  }

  export type LeadsScalarWhereWithAggregatesInput = {
    AND?: LeadsScalarWhereWithAggregatesInput | LeadsScalarWhereWithAggregatesInput[]
    OR?: LeadsScalarWhereWithAggregatesInput[]
    NOT?: LeadsScalarWhereWithAggregatesInput | LeadsScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Leads"> | string
    company?: StringNullableWithAggregatesFilter<"Leads"> | string | null
    email?: StringWithAggregatesFilter<"Leads"> | string
    phone?: StringNullableWithAggregatesFilter<"Leads"> | string | null
    linkedin?: StringNullableWithAggregatesFilter<"Leads"> | string | null
    event_id?: IntWithAggregatesFilter<"Leads"> | number
    job_role?: StringNullableWithAggregatesFilter<"Leads"> | string | null
    user_id?: IntWithAggregatesFilter<"Leads"> | number
    work_area?: StringNullableWithAggregatesFilter<"Leads"> | string | null
    id?: IntWithAggregatesFilter<"Leads"> | number
    company_id?: IntWithAggregatesFilter<"Leads"> | number
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    username?: StringFilter<"Users"> | string
    role?: StringFilter<"Users"> | string
    password_hash?: StringFilter<"Users"> | string
    unique_code?: StringFilter<"Users"> | string
    id?: IntFilter<"Users"> | number
    company_id?: IntFilter<"Users"> | number
    leads?: LeadsListRelationFilter
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
  }

  export type UsersOrderByWithRelationInput = {
    username?: SortOrder
    role?: SortOrder
    password_hash?: SortOrder
    unique_code?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
    leads?: LeadsOrderByRelationAggregateInput
    companies?: CompaniesOrderByWithRelationInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    username?: string
    id?: number
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    role?: StringFilter<"Users"> | string
    password_hash?: StringFilter<"Users"> | string
    unique_code?: StringFilter<"Users"> | string
    company_id?: IntFilter<"Users"> | number
    leads?: LeadsListRelationFilter
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
  }, "id" | "username">

  export type UsersOrderByWithAggregationInput = {
    username?: SortOrder
    role?: SortOrder
    password_hash?: SortOrder
    unique_code?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    username?: StringWithAggregatesFilter<"Users"> | string
    role?: StringWithAggregatesFilter<"Users"> | string
    password_hash?: StringWithAggregatesFilter<"Users"> | string
    unique_code?: StringWithAggregatesFilter<"Users"> | string
    id?: IntWithAggregatesFilter<"Users"> | number
    company_id?: IntWithAggregatesFilter<"Users"> | number
  }

  export type ContactLogWhereInput = {
    AND?: ContactLogWhereInput | ContactLogWhereInput[]
    OR?: ContactLogWhereInput[]
    NOT?: ContactLogWhereInput | ContactLogWhereInput[]
    id?: IntFilter<"ContactLog"> | number
    lead_id?: IntFilter<"ContactLog"> | number
    template_id?: IntFilter<"ContactLog"> | number
    update_contacts?: DateTimeFilter<"ContactLog"> | Date | string
    statusventa?: StringFilter<"ContactLog"> | string
  }

  export type ContactLogOrderByWithRelationInput = {
    id?: SortOrder
    lead_id?: SortOrder
    template_id?: SortOrder
    update_contacts?: SortOrder
    statusventa?: SortOrder
  }

  export type ContactLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactLogWhereInput | ContactLogWhereInput[]
    OR?: ContactLogWhereInput[]
    NOT?: ContactLogWhereInput | ContactLogWhereInput[]
    lead_id?: IntFilter<"ContactLog"> | number
    template_id?: IntFilter<"ContactLog"> | number
    update_contacts?: DateTimeFilter<"ContactLog"> | Date | string
    statusventa?: StringFilter<"ContactLog"> | string
  }, "id">

  export type ContactLogOrderByWithAggregationInput = {
    id?: SortOrder
    lead_id?: SortOrder
    template_id?: SortOrder
    update_contacts?: SortOrder
    statusventa?: SortOrder
    _count?: ContactLogCountOrderByAggregateInput
    _avg?: ContactLogAvgOrderByAggregateInput
    _max?: ContactLogMaxOrderByAggregateInput
    _min?: ContactLogMinOrderByAggregateInput
    _sum?: ContactLogSumOrderByAggregateInput
  }

  export type ContactLogScalarWhereWithAggregatesInput = {
    AND?: ContactLogScalarWhereWithAggregatesInput | ContactLogScalarWhereWithAggregatesInput[]
    OR?: ContactLogScalarWhereWithAggregatesInput[]
    NOT?: ContactLogScalarWhereWithAggregatesInput | ContactLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ContactLog"> | number
    lead_id?: IntWithAggregatesFilter<"ContactLog"> | number
    template_id?: IntWithAggregatesFilter<"ContactLog"> | number
    update_contacts?: DateTimeWithAggregatesFilter<"ContactLog"> | Date | string
    statusventa?: StringWithAggregatesFilter<"ContactLog"> | string
  }

  export type TemplatesWhereInput = {
    AND?: TemplatesWhereInput | TemplatesWhereInput[]
    OR?: TemplatesWhereInput[]
    NOT?: TemplatesWhereInput | TemplatesWhereInput[]
    name?: StringFilter<"Templates"> | string
    body?: StringFilter<"Templates"> | string
    createdAt?: DateTimeFilter<"Templates"> | Date | string
    updatedAt?: DateTimeFilter<"Templates"> | Date | string
    scheduled?: StringNullableFilter<"Templates"> | string | null
    active?: BoolFilter<"Templates"> | boolean
    deletedAt?: DateTimeNullableFilter<"Templates"> | Date | string | null
    id?: IntFilter<"Templates"> | number
    company_id?: IntFilter<"Templates"> | number
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
  }

  export type TemplatesOrderByWithRelationInput = {
    name?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduled?: SortOrderInput | SortOrder
    active?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    id?: SortOrder
    company_id?: SortOrder
    companies?: CompaniesOrderByWithRelationInput
  }

  export type TemplatesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TemplatesWhereInput | TemplatesWhereInput[]
    OR?: TemplatesWhereInput[]
    NOT?: TemplatesWhereInput | TemplatesWhereInput[]
    name?: StringFilter<"Templates"> | string
    body?: StringFilter<"Templates"> | string
    createdAt?: DateTimeFilter<"Templates"> | Date | string
    updatedAt?: DateTimeFilter<"Templates"> | Date | string
    scheduled?: StringNullableFilter<"Templates"> | string | null
    active?: BoolFilter<"Templates"> | boolean
    deletedAt?: DateTimeNullableFilter<"Templates"> | Date | string | null
    company_id?: IntFilter<"Templates"> | number
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
  }, "id">

  export type TemplatesOrderByWithAggregationInput = {
    name?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduled?: SortOrderInput | SortOrder
    active?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    id?: SortOrder
    company_id?: SortOrder
    _count?: TemplatesCountOrderByAggregateInput
    _avg?: TemplatesAvgOrderByAggregateInput
    _max?: TemplatesMaxOrderByAggregateInput
    _min?: TemplatesMinOrderByAggregateInput
    _sum?: TemplatesSumOrderByAggregateInput
  }

  export type TemplatesScalarWhereWithAggregatesInput = {
    AND?: TemplatesScalarWhereWithAggregatesInput | TemplatesScalarWhereWithAggregatesInput[]
    OR?: TemplatesScalarWhereWithAggregatesInput[]
    NOT?: TemplatesScalarWhereWithAggregatesInput | TemplatesScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Templates"> | string
    body?: StringWithAggregatesFilter<"Templates"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Templates"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Templates"> | Date | string
    scheduled?: StringNullableWithAggregatesFilter<"Templates"> | string | null
    active?: BoolWithAggregatesFilter<"Templates"> | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Templates"> | Date | string | null
    id?: IntWithAggregatesFilter<"Templates"> | number
    company_id?: IntWithAggregatesFilter<"Templates"> | number
  }

  export type EventsWhereInput = {
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    createdAt?: DateTimeFilter<"Events"> | Date | string
    updatedAt?: DateTimeFilter<"Events"> | Date | string
    description?: StringFilter<"Events"> | string
    fecha?: DateTimeFilter<"Events"> | Date | string
    location?: StringFilter<"Events"> | string
    name?: StringFilter<"Events"> | string
    type?: StringFilter<"Events"> | string
    id?: IntFilter<"Events"> | number
    company_id?: IntFilter<"Events"> | number
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
    leads?: LeadsListRelationFilter
  }

  export type EventsOrderByWithRelationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    fecha?: SortOrder
    location?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
    companies?: CompaniesOrderByWithRelationInput
    leads?: LeadsOrderByRelationAggregateInput
  }

  export type EventsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventsWhereInput | EventsWhereInput[]
    OR?: EventsWhereInput[]
    NOT?: EventsWhereInput | EventsWhereInput[]
    createdAt?: DateTimeFilter<"Events"> | Date | string
    updatedAt?: DateTimeFilter<"Events"> | Date | string
    description?: StringFilter<"Events"> | string
    fecha?: DateTimeFilter<"Events"> | Date | string
    location?: StringFilter<"Events"> | string
    name?: StringFilter<"Events"> | string
    type?: StringFilter<"Events"> | string
    company_id?: IntFilter<"Events"> | number
    companies?: XOR<CompaniesScalarRelationFilter, CompaniesWhereInput>
    leads?: LeadsListRelationFilter
  }, "id">

  export type EventsOrderByWithAggregationInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    fecha?: SortOrder
    location?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
    _count?: EventsCountOrderByAggregateInput
    _avg?: EventsAvgOrderByAggregateInput
    _max?: EventsMaxOrderByAggregateInput
    _min?: EventsMinOrderByAggregateInput
    _sum?: EventsSumOrderByAggregateInput
  }

  export type EventsScalarWhereWithAggregatesInput = {
    AND?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    OR?: EventsScalarWhereWithAggregatesInput[]
    NOT?: EventsScalarWhereWithAggregatesInput | EventsScalarWhereWithAggregatesInput[]
    createdAt?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    description?: StringWithAggregatesFilter<"Events"> | string
    fecha?: DateTimeWithAggregatesFilter<"Events"> | Date | string
    location?: StringWithAggregatesFilter<"Events"> | string
    name?: StringWithAggregatesFilter<"Events"> | string
    type?: StringWithAggregatesFilter<"Events"> | string
    id?: IntWithAggregatesFilter<"Events"> | number
    company_id?: IntWithAggregatesFilter<"Events"> | number
  }

  export type CompaniesCreateInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    events?: EventsCreateNestedManyWithoutCompaniesInput
    leads?: LeadsCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesCreateNestedManyWithoutCompaniesInput
    users?: UsersCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesUncheckedCreateInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    id?: number
    events?: EventsUncheckedCreateNestedManyWithoutCompaniesInput
    leads?: LeadsUncheckedCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesUncheckedCreateNestedManyWithoutCompaniesInput
    users?: UsersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    events?: EventsUpdateManyWithoutCompaniesNestedInput
    leads?: LeadsUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUpdateManyWithoutCompaniesNestedInput
    users?: UsersUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    events?: EventsUncheckedUpdateManyWithoutCompaniesNestedInput
    leads?: LeadsUncheckedUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: UsersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesCreateManyInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    id?: number
  }

  export type CompaniesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
  }

  export type CompaniesUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsCreateInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    job_role?: string | null
    work_area?: string | null
    companies: CompaniesCreateNestedOneWithoutLeadsInput
    events: EventsCreateNestedOneWithoutLeadsInput
    users: UsersCreateNestedOneWithoutLeadsInput
  }

  export type LeadsUncheckedCreateInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    event_id: number
    job_role?: string | null
    user_id: number
    work_area?: string | null
    id?: number
    company_id: number
  }

  export type LeadsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: CompaniesUpdateOneRequiredWithoutLeadsNestedInput
    events?: EventsUpdateOneRequiredWithoutLeadsNestedInput
    users?: UsersUpdateOneRequiredWithoutLeadsNestedInput
  }

  export type LeadsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsCreateManyInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    event_id: number
    job_role?: string | null
    user_id: number
    work_area?: string | null
    id?: number
    company_id: number
  }

  export type LeadsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersCreateInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    leads?: LeadsCreateNestedManyWithoutUsersInput
    companies: CompaniesCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    id?: number
    company_id: number
    leads?: LeadsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    leads?: LeadsUpdateManyWithoutUsersNestedInput
    companies?: CompaniesUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
    leads?: LeadsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersCreateManyInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    id?: number
    company_id: number
  }

  export type UsersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type ContactLogCreateInput = {
    lead_id: number
    template_id: number
    update_contacts: Date | string
    statusventa: string
  }

  export type ContactLogUncheckedCreateInput = {
    id?: number
    lead_id: number
    template_id: number
    update_contacts: Date | string
    statusventa: string
  }

  export type ContactLogUpdateInput = {
    lead_id?: IntFieldUpdateOperationsInput | number
    template_id?: IntFieldUpdateOperationsInput | number
    update_contacts?: DateTimeFieldUpdateOperationsInput | Date | string
    statusventa?: StringFieldUpdateOperationsInput | string
  }

  export type ContactLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lead_id?: IntFieldUpdateOperationsInput | number
    template_id?: IntFieldUpdateOperationsInput | number
    update_contacts?: DateTimeFieldUpdateOperationsInput | Date | string
    statusventa?: StringFieldUpdateOperationsInput | string
  }

  export type ContactLogCreateManyInput = {
    id?: number
    lead_id: number
    template_id: number
    update_contacts: Date | string
    statusventa: string
  }

  export type ContactLogUpdateManyMutationInput = {
    lead_id?: IntFieldUpdateOperationsInput | number
    template_id?: IntFieldUpdateOperationsInput | number
    update_contacts?: DateTimeFieldUpdateOperationsInput | Date | string
    statusventa?: StringFieldUpdateOperationsInput | string
  }

  export type ContactLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lead_id?: IntFieldUpdateOperationsInput | number
    template_id?: IntFieldUpdateOperationsInput | number
    update_contacts?: DateTimeFieldUpdateOperationsInput | Date | string
    statusventa?: StringFieldUpdateOperationsInput | string
  }

  export type TemplatesCreateInput = {
    name: string
    body: string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduled?: string | null
    active?: boolean
    deletedAt?: Date | string | null
    companies: CompaniesCreateNestedOneWithoutTemplatesInput
  }

  export type TemplatesUncheckedCreateInput = {
    name: string
    body: string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduled?: string | null
    active?: boolean
    deletedAt?: Date | string | null
    id?: number
    company_id: number
  }

  export type TemplatesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduled?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: CompaniesUpdateOneRequiredWithoutTemplatesNestedInput
  }

  export type TemplatesUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduled?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type TemplatesCreateManyInput = {
    name: string
    body: string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduled?: string | null
    active?: boolean
    deletedAt?: Date | string | null
    id?: number
    company_id: number
  }

  export type TemplatesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduled?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TemplatesUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduled?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type EventsCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    companies: CompaniesCreateNestedOneWithoutEventsInput
    leads?: LeadsCreateNestedManyWithoutEventsInput
  }

  export type EventsUncheckedCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    id?: number
    company_id: number
    leads?: LeadsUncheckedCreateNestedManyWithoutEventsInput
  }

  export type EventsUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companies?: CompaniesUpdateOneRequiredWithoutEventsNestedInput
    leads?: LeadsUpdateManyWithoutEventsNestedInput
  }

  export type EventsUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
    leads?: LeadsUncheckedUpdateManyWithoutEventsNestedInput
  }

  export type EventsCreateManyInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    id?: number
    company_id: number
  }

  export type EventsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type EventsUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EventsListRelationFilter = {
    every?: EventsWhereInput
    some?: EventsWhereInput
    none?: EventsWhereInput
  }

  export type LeadsListRelationFilter = {
    every?: LeadsWhereInput
    some?: LeadsWhereInput
    none?: LeadsWhereInput
  }

  export type TemplatesListRelationFilter = {
    every?: TemplatesWhereInput
    some?: TemplatesWhereInput
    none?: TemplatesWhereInput
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TemplatesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompaniesCountOrderByAggregateInput = {
    name?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee_numbers?: SortOrder
    ruc?: SortOrder
    sector?: SortOrder
    id?: SortOrder
  }

  export type CompaniesAvgOrderByAggregateInput = {
    employee_numbers?: SortOrder
    ruc?: SortOrder
    id?: SortOrder
  }

  export type CompaniesMaxOrderByAggregateInput = {
    name?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee_numbers?: SortOrder
    ruc?: SortOrder
    sector?: SortOrder
    id?: SortOrder
  }

  export type CompaniesMinOrderByAggregateInput = {
    name?: SortOrder
    country?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employee_numbers?: SortOrder
    ruc?: SortOrder
    sector?: SortOrder
    id?: SortOrder
  }

  export type CompaniesSumOrderByAggregateInput = {
    employee_numbers?: SortOrder
    ruc?: SortOrder
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CompaniesScalarRelationFilter = {
    is?: CompaniesWhereInput
    isNot?: CompaniesWhereInput
  }

  export type EventsScalarRelationFilter = {
    is?: EventsWhereInput
    isNot?: EventsWhereInput
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type LeadsCountOrderByAggregateInput = {
    name?: SortOrder
    company?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    linkedin?: SortOrder
    event_id?: SortOrder
    job_role?: SortOrder
    user_id?: SortOrder
    work_area?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type LeadsAvgOrderByAggregateInput = {
    event_id?: SortOrder
    user_id?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type LeadsMaxOrderByAggregateInput = {
    name?: SortOrder
    company?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    linkedin?: SortOrder
    event_id?: SortOrder
    job_role?: SortOrder
    user_id?: SortOrder
    work_area?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type LeadsMinOrderByAggregateInput = {
    name?: SortOrder
    company?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    linkedin?: SortOrder
    event_id?: SortOrder
    job_role?: SortOrder
    user_id?: SortOrder
    work_area?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type LeadsSumOrderByAggregateInput = {
    event_id?: SortOrder
    user_id?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UsersCountOrderByAggregateInput = {
    username?: SortOrder
    role?: SortOrder
    password_hash?: SortOrder
    unique_code?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    username?: SortOrder
    role?: SortOrder
    password_hash?: SortOrder
    unique_code?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    username?: SortOrder
    role?: SortOrder
    password_hash?: SortOrder
    unique_code?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
  }

  export type ContactLogCountOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    template_id?: SortOrder
    update_contacts?: SortOrder
    statusventa?: SortOrder
  }

  export type ContactLogAvgOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    template_id?: SortOrder
  }

  export type ContactLogMaxOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    template_id?: SortOrder
    update_contacts?: SortOrder
    statusventa?: SortOrder
  }

  export type ContactLogMinOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    template_id?: SortOrder
    update_contacts?: SortOrder
    statusventa?: SortOrder
  }

  export type ContactLogSumOrderByAggregateInput = {
    id?: SortOrder
    lead_id?: SortOrder
    template_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TemplatesCountOrderByAggregateInput = {
    name?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduled?: SortOrder
    active?: SortOrder
    deletedAt?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type TemplatesAvgOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
  }

  export type TemplatesMaxOrderByAggregateInput = {
    name?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduled?: SortOrder
    active?: SortOrder
    deletedAt?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type TemplatesMinOrderByAggregateInput = {
    name?: SortOrder
    body?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduled?: SortOrder
    active?: SortOrder
    deletedAt?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type TemplatesSumOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EventsCountOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    fecha?: SortOrder
    location?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type EventsAvgOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
  }

  export type EventsMaxOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    fecha?: SortOrder
    location?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type EventsMinOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    fecha?: SortOrder
    location?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id?: SortOrder
    company_id?: SortOrder
  }

  export type EventsSumOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
  }

  export type EventsCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<EventsCreateWithoutCompaniesInput, EventsUncheckedCreateWithoutCompaniesInput> | EventsCreateWithoutCompaniesInput[] | EventsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCompaniesInput | EventsCreateOrConnectWithoutCompaniesInput[]
    createMany?: EventsCreateManyCompaniesInputEnvelope
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
  }

  export type LeadsCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<LeadsCreateWithoutCompaniesInput, LeadsUncheckedCreateWithoutCompaniesInput> | LeadsCreateWithoutCompaniesInput[] | LeadsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutCompaniesInput | LeadsCreateOrConnectWithoutCompaniesInput[]
    createMany?: LeadsCreateManyCompaniesInputEnvelope
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
  }

  export type TemplatesCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<TemplatesCreateWithoutCompaniesInput, TemplatesUncheckedCreateWithoutCompaniesInput> | TemplatesCreateWithoutCompaniesInput[] | TemplatesUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: TemplatesCreateOrConnectWithoutCompaniesInput | TemplatesCreateOrConnectWithoutCompaniesInput[]
    createMany?: TemplatesCreateManyCompaniesInputEnvelope
    connect?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<UsersCreateWithoutCompaniesInput, UsersUncheckedCreateWithoutCompaniesInput> | UsersCreateWithoutCompaniesInput[] | UsersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCompaniesInput | UsersCreateOrConnectWithoutCompaniesInput[]
    createMany?: UsersCreateManyCompaniesInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type EventsUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<EventsCreateWithoutCompaniesInput, EventsUncheckedCreateWithoutCompaniesInput> | EventsCreateWithoutCompaniesInput[] | EventsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCompaniesInput | EventsCreateOrConnectWithoutCompaniesInput[]
    createMany?: EventsCreateManyCompaniesInputEnvelope
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
  }

  export type LeadsUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<LeadsCreateWithoutCompaniesInput, LeadsUncheckedCreateWithoutCompaniesInput> | LeadsCreateWithoutCompaniesInput[] | LeadsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutCompaniesInput | LeadsCreateOrConnectWithoutCompaniesInput[]
    createMany?: LeadsCreateManyCompaniesInputEnvelope
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
  }

  export type TemplatesUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<TemplatesCreateWithoutCompaniesInput, TemplatesUncheckedCreateWithoutCompaniesInput> | TemplatesCreateWithoutCompaniesInput[] | TemplatesUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: TemplatesCreateOrConnectWithoutCompaniesInput | TemplatesCreateOrConnectWithoutCompaniesInput[]
    createMany?: TemplatesCreateManyCompaniesInputEnvelope
    connect?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<UsersCreateWithoutCompaniesInput, UsersUncheckedCreateWithoutCompaniesInput> | UsersCreateWithoutCompaniesInput[] | UsersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCompaniesInput | UsersCreateOrConnectWithoutCompaniesInput[]
    createMany?: UsersCreateManyCompaniesInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventsUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<EventsCreateWithoutCompaniesInput, EventsUncheckedCreateWithoutCompaniesInput> | EventsCreateWithoutCompaniesInput[] | EventsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCompaniesInput | EventsCreateOrConnectWithoutCompaniesInput[]
    upsert?: EventsUpsertWithWhereUniqueWithoutCompaniesInput | EventsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: EventsCreateManyCompaniesInputEnvelope
    set?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    disconnect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    delete?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    update?: EventsUpdateWithWhereUniqueWithoutCompaniesInput | EventsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: EventsUpdateManyWithWhereWithoutCompaniesInput | EventsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: EventsScalarWhereInput | EventsScalarWhereInput[]
  }

  export type LeadsUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<LeadsCreateWithoutCompaniesInput, LeadsUncheckedCreateWithoutCompaniesInput> | LeadsCreateWithoutCompaniesInput[] | LeadsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutCompaniesInput | LeadsCreateOrConnectWithoutCompaniesInput[]
    upsert?: LeadsUpsertWithWhereUniqueWithoutCompaniesInput | LeadsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: LeadsCreateManyCompaniesInputEnvelope
    set?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    disconnect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    delete?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    update?: LeadsUpdateWithWhereUniqueWithoutCompaniesInput | LeadsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: LeadsUpdateManyWithWhereWithoutCompaniesInput | LeadsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
  }

  export type TemplatesUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<TemplatesCreateWithoutCompaniesInput, TemplatesUncheckedCreateWithoutCompaniesInput> | TemplatesCreateWithoutCompaniesInput[] | TemplatesUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: TemplatesCreateOrConnectWithoutCompaniesInput | TemplatesCreateOrConnectWithoutCompaniesInput[]
    upsert?: TemplatesUpsertWithWhereUniqueWithoutCompaniesInput | TemplatesUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: TemplatesCreateManyCompaniesInputEnvelope
    set?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    disconnect?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    delete?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    connect?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    update?: TemplatesUpdateWithWhereUniqueWithoutCompaniesInput | TemplatesUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: TemplatesUpdateManyWithWhereWithoutCompaniesInput | TemplatesUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: TemplatesScalarWhereInput | TemplatesScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<UsersCreateWithoutCompaniesInput, UsersUncheckedCreateWithoutCompaniesInput> | UsersCreateWithoutCompaniesInput[] | UsersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCompaniesInput | UsersCreateOrConnectWithoutCompaniesInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutCompaniesInput | UsersUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: UsersCreateManyCompaniesInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutCompaniesInput | UsersUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutCompaniesInput | UsersUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EventsUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<EventsCreateWithoutCompaniesInput, EventsUncheckedCreateWithoutCompaniesInput> | EventsCreateWithoutCompaniesInput[] | EventsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: EventsCreateOrConnectWithoutCompaniesInput | EventsCreateOrConnectWithoutCompaniesInput[]
    upsert?: EventsUpsertWithWhereUniqueWithoutCompaniesInput | EventsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: EventsCreateManyCompaniesInputEnvelope
    set?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    disconnect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    delete?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    connect?: EventsWhereUniqueInput | EventsWhereUniqueInput[]
    update?: EventsUpdateWithWhereUniqueWithoutCompaniesInput | EventsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: EventsUpdateManyWithWhereWithoutCompaniesInput | EventsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: EventsScalarWhereInput | EventsScalarWhereInput[]
  }

  export type LeadsUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<LeadsCreateWithoutCompaniesInput, LeadsUncheckedCreateWithoutCompaniesInput> | LeadsCreateWithoutCompaniesInput[] | LeadsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutCompaniesInput | LeadsCreateOrConnectWithoutCompaniesInput[]
    upsert?: LeadsUpsertWithWhereUniqueWithoutCompaniesInput | LeadsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: LeadsCreateManyCompaniesInputEnvelope
    set?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    disconnect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    delete?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    update?: LeadsUpdateWithWhereUniqueWithoutCompaniesInput | LeadsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: LeadsUpdateManyWithWhereWithoutCompaniesInput | LeadsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
  }

  export type TemplatesUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<TemplatesCreateWithoutCompaniesInput, TemplatesUncheckedCreateWithoutCompaniesInput> | TemplatesCreateWithoutCompaniesInput[] | TemplatesUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: TemplatesCreateOrConnectWithoutCompaniesInput | TemplatesCreateOrConnectWithoutCompaniesInput[]
    upsert?: TemplatesUpsertWithWhereUniqueWithoutCompaniesInput | TemplatesUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: TemplatesCreateManyCompaniesInputEnvelope
    set?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    disconnect?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    delete?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    connect?: TemplatesWhereUniqueInput | TemplatesWhereUniqueInput[]
    update?: TemplatesUpdateWithWhereUniqueWithoutCompaniesInput | TemplatesUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: TemplatesUpdateManyWithWhereWithoutCompaniesInput | TemplatesUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: TemplatesScalarWhereInput | TemplatesScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<UsersCreateWithoutCompaniesInput, UsersUncheckedCreateWithoutCompaniesInput> | UsersCreateWithoutCompaniesInput[] | UsersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutCompaniesInput | UsersCreateOrConnectWithoutCompaniesInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutCompaniesInput | UsersUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: UsersCreateManyCompaniesInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutCompaniesInput | UsersUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutCompaniesInput | UsersUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type CompaniesCreateNestedOneWithoutLeadsInput = {
    create?: XOR<CompaniesCreateWithoutLeadsInput, CompaniesUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutLeadsInput
    connect?: CompaniesWhereUniqueInput
  }

  export type EventsCreateNestedOneWithoutLeadsInput = {
    create?: XOR<EventsCreateWithoutLeadsInput, EventsUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutLeadsInput
    connect?: EventsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutLeadsInput = {
    create?: XOR<UsersCreateWithoutLeadsInput, UsersUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLeadsInput
    connect?: UsersWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CompaniesUpdateOneRequiredWithoutLeadsNestedInput = {
    create?: XOR<CompaniesCreateWithoutLeadsInput, CompaniesUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutLeadsInput
    upsert?: CompaniesUpsertWithoutLeadsInput
    connect?: CompaniesWhereUniqueInput
    update?: XOR<XOR<CompaniesUpdateToOneWithWhereWithoutLeadsInput, CompaniesUpdateWithoutLeadsInput>, CompaniesUncheckedUpdateWithoutLeadsInput>
  }

  export type EventsUpdateOneRequiredWithoutLeadsNestedInput = {
    create?: XOR<EventsCreateWithoutLeadsInput, EventsUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: EventsCreateOrConnectWithoutLeadsInput
    upsert?: EventsUpsertWithoutLeadsInput
    connect?: EventsWhereUniqueInput
    update?: XOR<XOR<EventsUpdateToOneWithWhereWithoutLeadsInput, EventsUpdateWithoutLeadsInput>, EventsUncheckedUpdateWithoutLeadsInput>
  }

  export type UsersUpdateOneRequiredWithoutLeadsNestedInput = {
    create?: XOR<UsersCreateWithoutLeadsInput, UsersUncheckedCreateWithoutLeadsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLeadsInput
    upsert?: UsersUpsertWithoutLeadsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutLeadsInput, UsersUpdateWithoutLeadsInput>, UsersUncheckedUpdateWithoutLeadsInput>
  }

  export type LeadsCreateNestedManyWithoutUsersInput = {
    create?: XOR<LeadsCreateWithoutUsersInput, LeadsUncheckedCreateWithoutUsersInput> | LeadsCreateWithoutUsersInput[] | LeadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutUsersInput | LeadsCreateOrConnectWithoutUsersInput[]
    createMany?: LeadsCreateManyUsersInputEnvelope
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
  }

  export type CompaniesCreateNestedOneWithoutUsersInput = {
    create?: XOR<CompaniesCreateWithoutUsersInput, CompaniesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutUsersInput
    connect?: CompaniesWhereUniqueInput
  }

  export type LeadsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<LeadsCreateWithoutUsersInput, LeadsUncheckedCreateWithoutUsersInput> | LeadsCreateWithoutUsersInput[] | LeadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutUsersInput | LeadsCreateOrConnectWithoutUsersInput[]
    createMany?: LeadsCreateManyUsersInputEnvelope
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
  }

  export type LeadsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LeadsCreateWithoutUsersInput, LeadsUncheckedCreateWithoutUsersInput> | LeadsCreateWithoutUsersInput[] | LeadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutUsersInput | LeadsCreateOrConnectWithoutUsersInput[]
    upsert?: LeadsUpsertWithWhereUniqueWithoutUsersInput | LeadsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LeadsCreateManyUsersInputEnvelope
    set?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    disconnect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    delete?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    update?: LeadsUpdateWithWhereUniqueWithoutUsersInput | LeadsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LeadsUpdateManyWithWhereWithoutUsersInput | LeadsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
  }

  export type CompaniesUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<CompaniesCreateWithoutUsersInput, CompaniesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutUsersInput
    upsert?: CompaniesUpsertWithoutUsersInput
    connect?: CompaniesWhereUniqueInput
    update?: XOR<XOR<CompaniesUpdateToOneWithWhereWithoutUsersInput, CompaniesUpdateWithoutUsersInput>, CompaniesUncheckedUpdateWithoutUsersInput>
  }

  export type LeadsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<LeadsCreateWithoutUsersInput, LeadsUncheckedCreateWithoutUsersInput> | LeadsCreateWithoutUsersInput[] | LeadsUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutUsersInput | LeadsCreateOrConnectWithoutUsersInput[]
    upsert?: LeadsUpsertWithWhereUniqueWithoutUsersInput | LeadsUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: LeadsCreateManyUsersInputEnvelope
    set?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    disconnect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    delete?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    update?: LeadsUpdateWithWhereUniqueWithoutUsersInput | LeadsUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: LeadsUpdateManyWithWhereWithoutUsersInput | LeadsUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
  }

  export type CompaniesCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<CompaniesCreateWithoutTemplatesInput, CompaniesUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutTemplatesInput
    connect?: CompaniesWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CompaniesUpdateOneRequiredWithoutTemplatesNestedInput = {
    create?: XOR<CompaniesCreateWithoutTemplatesInput, CompaniesUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutTemplatesInput
    upsert?: CompaniesUpsertWithoutTemplatesInput
    connect?: CompaniesWhereUniqueInput
    update?: XOR<XOR<CompaniesUpdateToOneWithWhereWithoutTemplatesInput, CompaniesUpdateWithoutTemplatesInput>, CompaniesUncheckedUpdateWithoutTemplatesInput>
  }

  export type CompaniesCreateNestedOneWithoutEventsInput = {
    create?: XOR<CompaniesCreateWithoutEventsInput, CompaniesUncheckedCreateWithoutEventsInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutEventsInput
    connect?: CompaniesWhereUniqueInput
  }

  export type LeadsCreateNestedManyWithoutEventsInput = {
    create?: XOR<LeadsCreateWithoutEventsInput, LeadsUncheckedCreateWithoutEventsInput> | LeadsCreateWithoutEventsInput[] | LeadsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutEventsInput | LeadsCreateOrConnectWithoutEventsInput[]
    createMany?: LeadsCreateManyEventsInputEnvelope
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
  }

  export type LeadsUncheckedCreateNestedManyWithoutEventsInput = {
    create?: XOR<LeadsCreateWithoutEventsInput, LeadsUncheckedCreateWithoutEventsInput> | LeadsCreateWithoutEventsInput[] | LeadsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutEventsInput | LeadsCreateOrConnectWithoutEventsInput[]
    createMany?: LeadsCreateManyEventsInputEnvelope
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
  }

  export type CompaniesUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<CompaniesCreateWithoutEventsInput, CompaniesUncheckedCreateWithoutEventsInput>
    connectOrCreate?: CompaniesCreateOrConnectWithoutEventsInput
    upsert?: CompaniesUpsertWithoutEventsInput
    connect?: CompaniesWhereUniqueInput
    update?: XOR<XOR<CompaniesUpdateToOneWithWhereWithoutEventsInput, CompaniesUpdateWithoutEventsInput>, CompaniesUncheckedUpdateWithoutEventsInput>
  }

  export type LeadsUpdateManyWithoutEventsNestedInput = {
    create?: XOR<LeadsCreateWithoutEventsInput, LeadsUncheckedCreateWithoutEventsInput> | LeadsCreateWithoutEventsInput[] | LeadsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutEventsInput | LeadsCreateOrConnectWithoutEventsInput[]
    upsert?: LeadsUpsertWithWhereUniqueWithoutEventsInput | LeadsUpsertWithWhereUniqueWithoutEventsInput[]
    createMany?: LeadsCreateManyEventsInputEnvelope
    set?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    disconnect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    delete?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    update?: LeadsUpdateWithWhereUniqueWithoutEventsInput | LeadsUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: LeadsUpdateManyWithWhereWithoutEventsInput | LeadsUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
  }

  export type LeadsUncheckedUpdateManyWithoutEventsNestedInput = {
    create?: XOR<LeadsCreateWithoutEventsInput, LeadsUncheckedCreateWithoutEventsInput> | LeadsCreateWithoutEventsInput[] | LeadsUncheckedCreateWithoutEventsInput[]
    connectOrCreate?: LeadsCreateOrConnectWithoutEventsInput | LeadsCreateOrConnectWithoutEventsInput[]
    upsert?: LeadsUpsertWithWhereUniqueWithoutEventsInput | LeadsUpsertWithWhereUniqueWithoutEventsInput[]
    createMany?: LeadsCreateManyEventsInputEnvelope
    set?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    disconnect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    delete?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    connect?: LeadsWhereUniqueInput | LeadsWhereUniqueInput[]
    update?: LeadsUpdateWithWhereUniqueWithoutEventsInput | LeadsUpdateWithWhereUniqueWithoutEventsInput[]
    updateMany?: LeadsUpdateManyWithWhereWithoutEventsInput | LeadsUpdateManyWithWhereWithoutEventsInput[]
    deleteMany?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EventsCreateWithoutCompaniesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    leads?: LeadsCreateNestedManyWithoutEventsInput
  }

  export type EventsUncheckedCreateWithoutCompaniesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    id?: number
    leads?: LeadsUncheckedCreateNestedManyWithoutEventsInput
  }

  export type EventsCreateOrConnectWithoutCompaniesInput = {
    where: EventsWhereUniqueInput
    create: XOR<EventsCreateWithoutCompaniesInput, EventsUncheckedCreateWithoutCompaniesInput>
  }

  export type EventsCreateManyCompaniesInputEnvelope = {
    data: EventsCreateManyCompaniesInput | EventsCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type LeadsCreateWithoutCompaniesInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    job_role?: string | null
    work_area?: string | null
    events: EventsCreateNestedOneWithoutLeadsInput
    users: UsersCreateNestedOneWithoutLeadsInput
  }

  export type LeadsUncheckedCreateWithoutCompaniesInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    event_id: number
    job_role?: string | null
    user_id: number
    work_area?: string | null
    id?: number
  }

  export type LeadsCreateOrConnectWithoutCompaniesInput = {
    where: LeadsWhereUniqueInput
    create: XOR<LeadsCreateWithoutCompaniesInput, LeadsUncheckedCreateWithoutCompaniesInput>
  }

  export type LeadsCreateManyCompaniesInputEnvelope = {
    data: LeadsCreateManyCompaniesInput | LeadsCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type TemplatesCreateWithoutCompaniesInput = {
    name: string
    body: string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduled?: string | null
    active?: boolean
    deletedAt?: Date | string | null
  }

  export type TemplatesUncheckedCreateWithoutCompaniesInput = {
    name: string
    body: string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduled?: string | null
    active?: boolean
    deletedAt?: Date | string | null
    id?: number
  }

  export type TemplatesCreateOrConnectWithoutCompaniesInput = {
    where: TemplatesWhereUniqueInput
    create: XOR<TemplatesCreateWithoutCompaniesInput, TemplatesUncheckedCreateWithoutCompaniesInput>
  }

  export type TemplatesCreateManyCompaniesInputEnvelope = {
    data: TemplatesCreateManyCompaniesInput | TemplatesCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutCompaniesInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    leads?: LeadsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutCompaniesInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    id?: number
    leads?: LeadsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutCompaniesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCompaniesInput, UsersUncheckedCreateWithoutCompaniesInput>
  }

  export type UsersCreateManyCompaniesInputEnvelope = {
    data: UsersCreateManyCompaniesInput | UsersCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type EventsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: EventsWhereUniqueInput
    update: XOR<EventsUpdateWithoutCompaniesInput, EventsUncheckedUpdateWithoutCompaniesInput>
    create: XOR<EventsCreateWithoutCompaniesInput, EventsUncheckedCreateWithoutCompaniesInput>
  }

  export type EventsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: EventsWhereUniqueInput
    data: XOR<EventsUpdateWithoutCompaniesInput, EventsUncheckedUpdateWithoutCompaniesInput>
  }

  export type EventsUpdateManyWithWhereWithoutCompaniesInput = {
    where: EventsScalarWhereInput
    data: XOR<EventsUpdateManyMutationInput, EventsUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type EventsScalarWhereInput = {
    AND?: EventsScalarWhereInput | EventsScalarWhereInput[]
    OR?: EventsScalarWhereInput[]
    NOT?: EventsScalarWhereInput | EventsScalarWhereInput[]
    createdAt?: DateTimeFilter<"Events"> | Date | string
    updatedAt?: DateTimeFilter<"Events"> | Date | string
    description?: StringFilter<"Events"> | string
    fecha?: DateTimeFilter<"Events"> | Date | string
    location?: StringFilter<"Events"> | string
    name?: StringFilter<"Events"> | string
    type?: StringFilter<"Events"> | string
    id?: IntFilter<"Events"> | number
    company_id?: IntFilter<"Events"> | number
  }

  export type LeadsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: LeadsWhereUniqueInput
    update: XOR<LeadsUpdateWithoutCompaniesInput, LeadsUncheckedUpdateWithoutCompaniesInput>
    create: XOR<LeadsCreateWithoutCompaniesInput, LeadsUncheckedCreateWithoutCompaniesInput>
  }

  export type LeadsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: LeadsWhereUniqueInput
    data: XOR<LeadsUpdateWithoutCompaniesInput, LeadsUncheckedUpdateWithoutCompaniesInput>
  }

  export type LeadsUpdateManyWithWhereWithoutCompaniesInput = {
    where: LeadsScalarWhereInput
    data: XOR<LeadsUpdateManyMutationInput, LeadsUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type LeadsScalarWhereInput = {
    AND?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
    OR?: LeadsScalarWhereInput[]
    NOT?: LeadsScalarWhereInput | LeadsScalarWhereInput[]
    name?: StringFilter<"Leads"> | string
    company?: StringNullableFilter<"Leads"> | string | null
    email?: StringFilter<"Leads"> | string
    phone?: StringNullableFilter<"Leads"> | string | null
    linkedin?: StringNullableFilter<"Leads"> | string | null
    event_id?: IntFilter<"Leads"> | number
    job_role?: StringNullableFilter<"Leads"> | string | null
    user_id?: IntFilter<"Leads"> | number
    work_area?: StringNullableFilter<"Leads"> | string | null
    id?: IntFilter<"Leads"> | number
    company_id?: IntFilter<"Leads"> | number
  }

  export type TemplatesUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: TemplatesWhereUniqueInput
    update: XOR<TemplatesUpdateWithoutCompaniesInput, TemplatesUncheckedUpdateWithoutCompaniesInput>
    create: XOR<TemplatesCreateWithoutCompaniesInput, TemplatesUncheckedCreateWithoutCompaniesInput>
  }

  export type TemplatesUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: TemplatesWhereUniqueInput
    data: XOR<TemplatesUpdateWithoutCompaniesInput, TemplatesUncheckedUpdateWithoutCompaniesInput>
  }

  export type TemplatesUpdateManyWithWhereWithoutCompaniesInput = {
    where: TemplatesScalarWhereInput
    data: XOR<TemplatesUpdateManyMutationInput, TemplatesUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type TemplatesScalarWhereInput = {
    AND?: TemplatesScalarWhereInput | TemplatesScalarWhereInput[]
    OR?: TemplatesScalarWhereInput[]
    NOT?: TemplatesScalarWhereInput | TemplatesScalarWhereInput[]
    name?: StringFilter<"Templates"> | string
    body?: StringFilter<"Templates"> | string
    createdAt?: DateTimeFilter<"Templates"> | Date | string
    updatedAt?: DateTimeFilter<"Templates"> | Date | string
    scheduled?: StringNullableFilter<"Templates"> | string | null
    active?: BoolFilter<"Templates"> | boolean
    deletedAt?: DateTimeNullableFilter<"Templates"> | Date | string | null
    id?: IntFilter<"Templates"> | number
    company_id?: IntFilter<"Templates"> | number
  }

  export type UsersUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutCompaniesInput, UsersUncheckedUpdateWithoutCompaniesInput>
    create: XOR<UsersCreateWithoutCompaniesInput, UsersUncheckedCreateWithoutCompaniesInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutCompaniesInput, UsersUncheckedUpdateWithoutCompaniesInput>
  }

  export type UsersUpdateManyWithWhereWithoutCompaniesInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    username?: StringFilter<"Users"> | string
    role?: StringFilter<"Users"> | string
    password_hash?: StringFilter<"Users"> | string
    unique_code?: StringFilter<"Users"> | string
    id?: IntFilter<"Users"> | number
    company_id?: IntFilter<"Users"> | number
  }

  export type CompaniesCreateWithoutLeadsInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    events?: EventsCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesCreateNestedManyWithoutCompaniesInput
    users?: UsersCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesUncheckedCreateWithoutLeadsInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    id?: number
    events?: EventsUncheckedCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesUncheckedCreateNestedManyWithoutCompaniesInput
    users?: UsersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesCreateOrConnectWithoutLeadsInput = {
    where: CompaniesWhereUniqueInput
    create: XOR<CompaniesCreateWithoutLeadsInput, CompaniesUncheckedCreateWithoutLeadsInput>
  }

  export type EventsCreateWithoutLeadsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    companies: CompaniesCreateNestedOneWithoutEventsInput
  }

  export type EventsUncheckedCreateWithoutLeadsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    id?: number
    company_id: number
  }

  export type EventsCreateOrConnectWithoutLeadsInput = {
    where: EventsWhereUniqueInput
    create: XOR<EventsCreateWithoutLeadsInput, EventsUncheckedCreateWithoutLeadsInput>
  }

  export type UsersCreateWithoutLeadsInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    companies: CompaniesCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutLeadsInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    id?: number
    company_id: number
  }

  export type UsersCreateOrConnectWithoutLeadsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLeadsInput, UsersUncheckedCreateWithoutLeadsInput>
  }

  export type CompaniesUpsertWithoutLeadsInput = {
    update: XOR<CompaniesUpdateWithoutLeadsInput, CompaniesUncheckedUpdateWithoutLeadsInput>
    create: XOR<CompaniesCreateWithoutLeadsInput, CompaniesUncheckedCreateWithoutLeadsInput>
    where?: CompaniesWhereInput
  }

  export type CompaniesUpdateToOneWithWhereWithoutLeadsInput = {
    where?: CompaniesWhereInput
    data: XOR<CompaniesUpdateWithoutLeadsInput, CompaniesUncheckedUpdateWithoutLeadsInput>
  }

  export type CompaniesUpdateWithoutLeadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    events?: EventsUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUpdateManyWithoutCompaniesNestedInput
    users?: UsersUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateWithoutLeadsInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    events?: EventsUncheckedUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: UsersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type EventsUpsertWithoutLeadsInput = {
    update: XOR<EventsUpdateWithoutLeadsInput, EventsUncheckedUpdateWithoutLeadsInput>
    create: XOR<EventsCreateWithoutLeadsInput, EventsUncheckedCreateWithoutLeadsInput>
    where?: EventsWhereInput
  }

  export type EventsUpdateToOneWithWhereWithoutLeadsInput = {
    where?: EventsWhereInput
    data: XOR<EventsUpdateWithoutLeadsInput, EventsUncheckedUpdateWithoutLeadsInput>
  }

  export type EventsUpdateWithoutLeadsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    companies?: CompaniesUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventsUncheckedUpdateWithoutLeadsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersUpsertWithoutLeadsInput = {
    update: XOR<UsersUpdateWithoutLeadsInput, UsersUncheckedUpdateWithoutLeadsInput>
    create: XOR<UsersCreateWithoutLeadsInput, UsersUncheckedCreateWithoutLeadsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutLeadsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutLeadsInput, UsersUncheckedUpdateWithoutLeadsInput>
  }

  export type UsersUpdateWithoutLeadsInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    companies?: CompaniesUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutLeadsInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsCreateWithoutUsersInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    job_role?: string | null
    work_area?: string | null
    companies: CompaniesCreateNestedOneWithoutLeadsInput
    events: EventsCreateNestedOneWithoutLeadsInput
  }

  export type LeadsUncheckedCreateWithoutUsersInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    event_id: number
    job_role?: string | null
    work_area?: string | null
    id?: number
    company_id: number
  }

  export type LeadsCreateOrConnectWithoutUsersInput = {
    where: LeadsWhereUniqueInput
    create: XOR<LeadsCreateWithoutUsersInput, LeadsUncheckedCreateWithoutUsersInput>
  }

  export type LeadsCreateManyUsersInputEnvelope = {
    data: LeadsCreateManyUsersInput | LeadsCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type CompaniesCreateWithoutUsersInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    events?: EventsCreateNestedManyWithoutCompaniesInput
    leads?: LeadsCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesUncheckedCreateWithoutUsersInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    id?: number
    events?: EventsUncheckedCreateNestedManyWithoutCompaniesInput
    leads?: LeadsUncheckedCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesCreateOrConnectWithoutUsersInput = {
    where: CompaniesWhereUniqueInput
    create: XOR<CompaniesCreateWithoutUsersInput, CompaniesUncheckedCreateWithoutUsersInput>
  }

  export type LeadsUpsertWithWhereUniqueWithoutUsersInput = {
    where: LeadsWhereUniqueInput
    update: XOR<LeadsUpdateWithoutUsersInput, LeadsUncheckedUpdateWithoutUsersInput>
    create: XOR<LeadsCreateWithoutUsersInput, LeadsUncheckedCreateWithoutUsersInput>
  }

  export type LeadsUpdateWithWhereUniqueWithoutUsersInput = {
    where: LeadsWhereUniqueInput
    data: XOR<LeadsUpdateWithoutUsersInput, LeadsUncheckedUpdateWithoutUsersInput>
  }

  export type LeadsUpdateManyWithWhereWithoutUsersInput = {
    where: LeadsScalarWhereInput
    data: XOR<LeadsUpdateManyMutationInput, LeadsUncheckedUpdateManyWithoutUsersInput>
  }

  export type CompaniesUpsertWithoutUsersInput = {
    update: XOR<CompaniesUpdateWithoutUsersInput, CompaniesUncheckedUpdateWithoutUsersInput>
    create: XOR<CompaniesCreateWithoutUsersInput, CompaniesUncheckedCreateWithoutUsersInput>
    where?: CompaniesWhereInput
  }

  export type CompaniesUpdateToOneWithWhereWithoutUsersInput = {
    where?: CompaniesWhereInput
    data: XOR<CompaniesUpdateWithoutUsersInput, CompaniesUncheckedUpdateWithoutUsersInput>
  }

  export type CompaniesUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    events?: EventsUpdateManyWithoutCompaniesNestedInput
    leads?: LeadsUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    events?: EventsUncheckedUpdateManyWithoutCompaniesNestedInput
    leads?: LeadsUncheckedUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesCreateWithoutTemplatesInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    events?: EventsCreateNestedManyWithoutCompaniesInput
    leads?: LeadsCreateNestedManyWithoutCompaniesInput
    users?: UsersCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesUncheckedCreateWithoutTemplatesInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    id?: number
    events?: EventsUncheckedCreateNestedManyWithoutCompaniesInput
    leads?: LeadsUncheckedCreateNestedManyWithoutCompaniesInput
    users?: UsersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesCreateOrConnectWithoutTemplatesInput = {
    where: CompaniesWhereUniqueInput
    create: XOR<CompaniesCreateWithoutTemplatesInput, CompaniesUncheckedCreateWithoutTemplatesInput>
  }

  export type CompaniesUpsertWithoutTemplatesInput = {
    update: XOR<CompaniesUpdateWithoutTemplatesInput, CompaniesUncheckedUpdateWithoutTemplatesInput>
    create: XOR<CompaniesCreateWithoutTemplatesInput, CompaniesUncheckedCreateWithoutTemplatesInput>
    where?: CompaniesWhereInput
  }

  export type CompaniesUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: CompaniesWhereInput
    data: XOR<CompaniesUpdateWithoutTemplatesInput, CompaniesUncheckedUpdateWithoutTemplatesInput>
  }

  export type CompaniesUpdateWithoutTemplatesInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    events?: EventsUpdateManyWithoutCompaniesNestedInput
    leads?: LeadsUpdateManyWithoutCompaniesNestedInput
    users?: UsersUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateWithoutTemplatesInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    events?: EventsUncheckedUpdateManyWithoutCompaniesNestedInput
    leads?: LeadsUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: UsersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesCreateWithoutEventsInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    leads?: LeadsCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesCreateNestedManyWithoutCompaniesInput
    users?: UsersCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesUncheckedCreateWithoutEventsInput = {
    name: string
    country: string
    createdAt?: Date | string
    updatedAt?: Date | string
    employee_numbers?: number | null
    ruc?: number | null
    sector: string
    id?: number
    leads?: LeadsUncheckedCreateNestedManyWithoutCompaniesInput
    templates?: TemplatesUncheckedCreateNestedManyWithoutCompaniesInput
    users?: UsersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type CompaniesCreateOrConnectWithoutEventsInput = {
    where: CompaniesWhereUniqueInput
    create: XOR<CompaniesCreateWithoutEventsInput, CompaniesUncheckedCreateWithoutEventsInput>
  }

  export type LeadsCreateWithoutEventsInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    job_role?: string | null
    work_area?: string | null
    companies: CompaniesCreateNestedOneWithoutLeadsInput
    users: UsersCreateNestedOneWithoutLeadsInput
  }

  export type LeadsUncheckedCreateWithoutEventsInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    job_role?: string | null
    user_id: number
    work_area?: string | null
    id?: number
    company_id: number
  }

  export type LeadsCreateOrConnectWithoutEventsInput = {
    where: LeadsWhereUniqueInput
    create: XOR<LeadsCreateWithoutEventsInput, LeadsUncheckedCreateWithoutEventsInput>
  }

  export type LeadsCreateManyEventsInputEnvelope = {
    data: LeadsCreateManyEventsInput | LeadsCreateManyEventsInput[]
    skipDuplicates?: boolean
  }

  export type CompaniesUpsertWithoutEventsInput = {
    update: XOR<CompaniesUpdateWithoutEventsInput, CompaniesUncheckedUpdateWithoutEventsInput>
    create: XOR<CompaniesCreateWithoutEventsInput, CompaniesUncheckedCreateWithoutEventsInput>
    where?: CompaniesWhereInput
  }

  export type CompaniesUpdateToOneWithWhereWithoutEventsInput = {
    where?: CompaniesWhereInput
    data: XOR<CompaniesUpdateWithoutEventsInput, CompaniesUncheckedUpdateWithoutEventsInput>
  }

  export type CompaniesUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    leads?: LeadsUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUpdateManyWithoutCompaniesNestedInput
    users?: UsersUpdateManyWithoutCompaniesNestedInput
  }

  export type CompaniesUncheckedUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employee_numbers?: NullableFloatFieldUpdateOperationsInput | number | null
    ruc?: NullableFloatFieldUpdateOperationsInput | number | null
    sector?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    leads?: LeadsUncheckedUpdateManyWithoutCompaniesNestedInput
    templates?: TemplatesUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: UsersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type LeadsUpsertWithWhereUniqueWithoutEventsInput = {
    where: LeadsWhereUniqueInput
    update: XOR<LeadsUpdateWithoutEventsInput, LeadsUncheckedUpdateWithoutEventsInput>
    create: XOR<LeadsCreateWithoutEventsInput, LeadsUncheckedCreateWithoutEventsInput>
  }

  export type LeadsUpdateWithWhereUniqueWithoutEventsInput = {
    where: LeadsWhereUniqueInput
    data: XOR<LeadsUpdateWithoutEventsInput, LeadsUncheckedUpdateWithoutEventsInput>
  }

  export type LeadsUpdateManyWithWhereWithoutEventsInput = {
    where: LeadsScalarWhereInput
    data: XOR<LeadsUpdateManyMutationInput, LeadsUncheckedUpdateManyWithoutEventsInput>
  }

  export type EventsCreateManyCompaniesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    description: string
    fecha: Date | string
    location: string
    name: string
    type: string
    id?: number
  }

  export type LeadsCreateManyCompaniesInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    event_id: number
    job_role?: string | null
    user_id: number
    work_area?: string | null
    id?: number
  }

  export type TemplatesCreateManyCompaniesInput = {
    name: string
    body: string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduled?: string | null
    active?: boolean
    deletedAt?: Date | string | null
    id?: number
  }

  export type UsersCreateManyCompaniesInput = {
    username: string
    role: string
    password_hash: string
    unique_code: string
    id?: number
  }

  export type EventsUpdateWithoutCompaniesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    leads?: LeadsUpdateManyWithoutEventsNestedInput
  }

  export type EventsUncheckedUpdateWithoutCompaniesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    leads?: LeadsUncheckedUpdateManyWithoutEventsNestedInput
  }

  export type EventsUncheckedUpdateManyWithoutCompaniesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    location?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsUpdateWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    events?: EventsUpdateOneRequiredWithoutLeadsNestedInput
    users?: UsersUpdateOneRequiredWithoutLeadsNestedInput
  }

  export type LeadsUncheckedUpdateWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsUncheckedUpdateManyWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type TemplatesUpdateWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduled?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TemplatesUncheckedUpdateWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduled?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type TemplatesUncheckedUpdateManyWithoutCompaniesInput = {
    name?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduled?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersUpdateWithoutCompaniesInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    leads?: LeadsUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutCompaniesInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
    leads?: LeadsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutCompaniesInput = {
    username?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    unique_code?: StringFieldUpdateOperationsInput | string
    id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsCreateManyUsersInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    event_id: number
    job_role?: string | null
    work_area?: string | null
    id?: number
    company_id: number
  }

  export type LeadsUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: CompaniesUpdateOneRequiredWithoutLeadsNestedInput
    events?: EventsUpdateOneRequiredWithoutLeadsNestedInput
  }

  export type LeadsUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsUncheckedUpdateManyWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    event_id?: IntFieldUpdateOperationsInput | number
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsCreateManyEventsInput = {
    name: string
    company?: string | null
    email: string
    phone?: string | null
    linkedin?: string | null
    job_role?: string | null
    user_id: number
    work_area?: string | null
    id?: number
    company_id: number
  }

  export type LeadsUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: CompaniesUpdateOneRequiredWithoutLeadsNestedInput
    users?: UsersUpdateOneRequiredWithoutLeadsNestedInput
  }

  export type LeadsUncheckedUpdateWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }

  export type LeadsUncheckedUpdateManyWithoutEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    linkedin?: NullableStringFieldUpdateOperationsInput | string | null
    job_role?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    work_area?: NullableStringFieldUpdateOperationsInput | string | null
    id?: IntFieldUpdateOperationsInput | number
    company_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}