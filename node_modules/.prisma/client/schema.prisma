generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Companies {
  id               Int    @id @default(autoincrement()) @map("id")
  name             String @map("name")
  ruc              Float? @map("ruc") // Puede ser NULL
  sector           String @map("sector")
  country          String @map("country") @db.VarChar(50) // varchar(50)
  employee_numbers Float  @map("employee_numbers")

  leads Leads[] // Una compañía puede tener varios leads

  @@map("companies")
}

model Leads {
  id         Int       @id @default(autoincrement()) @map("id")
  name       String    @map("name")
  email      String    @map("email")
  phone      String?   @map("phone")
  linkedin   String?   @map("linkedin")
  job_role   String?   @map("job_role")
  work_area  String?   @map("work_area")
  company_id Int       @map("company_id")
  event_id   Int       @map("event_id")
  user_id    Int       @map("user_id")
  company    Companies @relation(fields: [company_id], references: [id])
  events     Events    @relation(fields: [event_id], references: [id])
  users      Users     @relation("UserLeads", fields: [user_id], references: [id])

  @@map("leads")
}

model Users {
  id              Int     @id @default(autoincrement()) @map("id")
  email           String  @unique @map("email") @db.VarChar(100) // Campo único
  name            String  @map("name") @db.VarChar(50)
  password_google String  @map("password_google")
  unique_code     String  @map("unique_code")
  leads           Leads[] @relation("UserLeads") // Un usuario puede tener varios leads

  @@map("users")
}

model ContactLog {
  id              Int      @id @default(autoincrement()) @map("id")
  lead_id         Int      @map("lead_id")
  template_id     Int      @map("template_id")
  update_contacts DateTime @map("update_contacts")
  statusventa     String   @map("statusventa")
}

model Templates {
  id        Int       @id @default(autoincrement()) @map("id")
  name      String    @map("name")
  body      String    @map("body")
  type      String    @map("type") // correo o whatsapp
  createdAt DateTime  @default(now()) @map("createdAt") // Corregido
  updatedAt DateTime  @updatedAt @map("updatedAt") // Corregido
  deletedAt DateTime? @map("deletedAt") // Corregido

  @@map("templates")
}

model Events {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @map("name") @db.VarChar(150) // varchar(150) según la imagen
  type        String   @map("type") @db.VarChar(50) // varchar(50) según la imagen
  location    String   @map("location") @db.VarChar(150) // varchar(150) según la imagen
  fecha       DateTime @map("fecha") // date según la imagen
  description String   @map("description") // text según la imagen
  company_id  Int      @map("company_id")

  leads Leads[]

  @@map("events")
}

model Meets {
  id           Int      @id @default(autoincrement()) @map("id")
  fecha        DateTime @map("fecha") // Campo de tipo date
  time         String   @map("time") // Campo de tipo time (representado como String en Prisma)
  link         String   @map("link") // Campo de tipo text
  recordatorio String?  @map("recordatorio") // Campo de tipo text que puede ser NULL

  @@map("meets")
}
